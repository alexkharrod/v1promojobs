This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.repomix/
  bundles.json
accounts/
  migrations/
    0001_initial.py
    0002_employer_company_description_employer_logo_and_more.py
  admin.py
  apps.py
  forms.py
  models.py
  tests.py
  urls.py
  views.py
applications/
  migrations/
    0001_initial.py
  admin.py
  apps.py
  forms.py
  models.py
  tests.py
  urls.py
  views.py
backup/
  accounts/
    migrations/
      0001_initial.py
      0002_employer_company_description_employer_logo_and_more.py
  employers/
    migrations/
      0001_initial.py
  jobs/
    migrations/
      0001_initial.py
      0002_job_industry.py
      0002_job_views.py
      0003_job_applications.py
      0003_savedsearch.py
      0004_merge_0003_job_applications_0003_savedsearch.py
core/
  migrations/
    0001_initial.py
    0002_alter_useractivity_activity_type_and_more.py
  admin.py
  apps.py
  models.py
  tests.py
  utils.py
  views.py
docs/
  adr/
    template.md
employers/
  migrations/
    0001_initial.py
    0002_alter_employer_company_description_and_more.py
  admin.py
  apps.py
  forms.py
  models.py
  tests.py
  urls.py
  views.py
jobs/
  migrations/
    0001_initial.py
    0002_job_industry.py
    0002_job_views.py
    0003_job_applications.py
    0003_savedsearch.py
    0004_merge_0003_job_applications_0003_savedsearch.py
    0005_alter_job_applications_alter_job_created_at_and_more.py
  admin.py
  apps.py
  forms.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
mysite/
  .env
  asgi.py
  settings.py
  urls.py
  views.py
  wsgi.py
search/
  migrations/
    0001_initial.py
  admin.py
  apps.py
  forms.py
  models.py
  tests.py
  urls.py
  views.py
src/
  core/
    utils/
      errors.ts
  generated/
    .openapi-generator/
      FILES
      VERSION
    .gitignore
    .npmignore
    .openapi-generator-ignore
    api.ts
    base.ts
    common.ts
    configuration.ts
    git_push.sh
    index.ts
static/
  components/
    HelloWorld.js
  css/
    style.css
templates/
  accounts/
    edit_employer_profile.html
    edit_jobseeker_profile.html
    login.html
    password_reset_complete.html
    password_reset_confirm.html
    password_reset_done.html
    password_reset_email.html
    password_reset.html
    profile_success.html
    register.html
  applications/
    application_detail.html
    application_failure.html
    application_success.html
    employer_applications.html
    update_application_status.html
  employers/
    employer_profile_create.html
    employer_profile_detail.html
    employer_profile_edit.html
  jobs/
    job_create.html
    job_detail.html
    job_edit.html
    job_list.html
    save_search.html
    saved_searches.html
  search/
    save_search.html
    saved_searches.html
    search.html
  two_factor/
    _base.html
  base.html
  home.html
activeContext.md
manage.py
openapi.yaml
productContext.md
progress.md
project_overview.md
README.md
requirements.txt
reset_migrations.py
systemPatterns.md
tasklist.md
techContext.md
two_factor_urls.py

================================================================
Files
================================================================

================
File: .repomix/bundles.json
================
{
  "bundles": {}
}

================
File: accounts/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 09:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('employer', 'Employer'), ('jobseeker', 'Job Seeker')], default='jobseeker', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobSeeker',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bio', models.TextField(blank=True)),
                ('resume', models.FileField(blank=True, upload_to='resumes/')),
                ('skills', models.CharField(blank=True, max_length=200)),
            ],
        ),
    ]

================
File: accounts/migrations/0002_employer_company_description_employer_logo_and_more.py
================
# Generated by Django manually

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0001_initial"),
    ]

    operations = [
        # This is a placeholder migration to replace the problematic one
        # No actual operations needed
    ]

================
File: accounts/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: accounts/apps.py
================
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'  # Default primary key field type
    name = 'accounts'  # Name of the app

================
File: accounts/forms.py
================
from django import forms  # Import the forms module
from django.contrib.auth.forms import (
    PasswordResetForm,
    SetPasswordForm,
    UserCreationForm,
)  # Import authentication forms

from employers.models import Employer  # Import the Employer model

from .models import JobSeeker, User  # Import the JobSeeker and User models
from django.contrib.auth.hashers import (
    make_password,
)  # Import the function to hash passwords


class RegistrationForm(forms.Form):
    """
    Form for user registration.
    """
    username = forms.CharField(
        max_length=150, required=True
    )  # Field for username (required)
    email = forms.EmailField(required=True)  # Field for email (required)
    password = forms.CharField(
        widget=forms.PasswordInput, required=True
    )  # Field for password (required)
    password2 = forms.CharField(
        widget=forms.PasswordInput, label="Confirm Password", required=True
    )  # Field to confirm password (required)
    user_type = forms.ChoiceField(
        choices=User.USER_TYPE_CHOICES, required=True
    )  # Field for user type (required)

    def clean_password2(self):
        """
        Validates that the password and confirm password fields match.
        """
        password = self.cleaned_data.get("password")  # Get the password
        password2 = self.cleaned_data.get("password2")  # Get the confirm password
        if password != password2:  # Check if passwords match
            raise forms.ValidationError(
                "Passwords do not match"
            )  # Raise validation error if they don't match
        return password2  # Return the confirm password

    def save(self):
        """
        Saves the new user to the database.
        """
        username = self.cleaned_data.get("username")  # Get the username
        email = self.cleaned_data.get("email")  # Get the email
        password = self.cleaned_data.get("password")  # Get the password
        user_type = self.cleaned_data.get("user_type")  # Get the user type

        user = User.objects.create(
            username=username, email=email, user_type=user_type
        )  # Create a new user
        user.password = make_password(
            password
        )  # Hash the password
        user.save()  # Save the user
        return user  # Return the user


class EmployerProfileForm(forms.ModelForm):
    """
    Form for creating and editing employer profiles.
    """
    class Meta:
        model = Employer  # Associate with the Employer model
        fields = [
            "company_name",
            "company_description",
            "website",
            "logo",
        ]  # Specify the fields to include
        model = Employer
        fields = ["company_name", "company_description", "website", "logo"]


class JobSeekerProfileForm(forms.ModelForm):
    """
    Form for creating and editing job seeker profiles.
    """
    class Meta:
        model = JobSeeker  # Associate with the JobSeeker model
        fields = ["bio", "resume", "skills"]  # Specify the fields to include


class PasswordResetForm(PasswordResetForm):
    """
    Custom password reset form.
    """
    pass


class SetPasswordForm(SetPasswordForm):
    """
    Custom set password form.
    """
    pass

================
File: accounts/models.py
================
from django.contrib.auth.models import AbstractUser  # Import the AbstractUser model
from django.db import models  # Import the models module

class User(AbstractUser):
    """
    Custom User model extending Django's AbstractUser.
    """
    USER_TYPE_CHOICES = (
        ("employer", "Employer"),  # Choice for Employer user type
        ("jobseeker", "Job Seeker"),  # Choice for Job Seeker user type
    )
    user_type = models.CharField(
        max_length=10,  # Maximum length for user_type field
        choices=USER_TYPE_CHOICES,  # Choices for user_type field
        default="jobseeker",  # Default value for user_type field
    )

    def __str__(self):
        """
        Returns a string representation of the user (username).
        """
        return self.username


class JobSeeker(models.Model):
    """
    Model representing a Job Seeker profile.
    """
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, primary_key=True
    )  # One-to-one relationship with the User model
    bio = models.TextField(blank=True)  # Biography of the job seeker
    resume = models.FileField(
        upload_to="resumes/", blank=True
    )  # Resume file of the job seeker
    skills = models.CharField(
        max_length=200, blank=True
    )  # Skills of the job seeker

    def __str__(self):
        """
        Returns a string representation of the job seeker (username).
        """
        return self.user.username

================
File: accounts/tests.py
================
from django.test import TestCase  # Import the TestCase class
from django.contrib.auth import get_user_model  # Import the get_user_model function
from .models import Employer, JobSeeker  # Import the Employer and JobSeeker models
from .forms import RegistrationForm  # Import the RegistrationForm

User = get_user_model()  # Get the User model

class UserManagementTests(TestCase):
    """
    Test class for user management functionalities.
    """
    def setUp(self):
        """
        Set up data for the tests.
        """
        self.username = 'testuser'  # Define a test username
        self.password = 'testpassword'  # Define a test password
        self.email = 'test@example.com'  # Define a test email

    def test_user_creation(self):
        """
        Test that a user can be created successfully.
        """
        user = User.objects.create_user(
            username=self.username, password=self.password, email=self.email
        )  # Create a new user
        self.assertEqual(user.username, self.username)  # Assert that the username is correct
        self.assertEqual(user.email, self.email)  # Assert that the email is correct
        self.assertTrue(
            user.check_password(self.password)
        )  # Assert that the password is correct

    def test_user_authentication(self):
        """
        Test that a user can be authenticated successfully.
        """
        user = User.objects.create_user(
            username=self.username, password=self.password, email=self.email
        )  # Create a new user
        authenticated_user = self.client.login(
            username=self.username, password=self.password
        )  # Log in the user
        self.assertTrue(authenticated_user)  # Assert that the user is authenticated

    def test_employer_profile_creation(self):
        """
        Test that an employer profile can be created successfully.
        """
        user = User.objects.create_user(
            username=self.username, password=self.password, email=self.email, user_type='employer'
        )  # Create a new employer user
        employer = Employer.objects.create(
            user=user, company_name='Test Company'
        )  # Create a new employer profile
        self.assertEqual(employer.user, user)  # Assert that the user is correct
        self.assertEqual(employer.company_name, 'Test Company')  # Assert that the company name is correct

    def test_jobseeker_profile_creation(self):
        """
        Test that a jobseeker profile can be created successfully.
        """
        user = User.objects.create_user(
            username=self.username, password=self.password, email=self.email, user_type='jobseeker'
        )  # Create a new job seeker user
        jobseeker = JobSeeker.objects.create(
            user=user, bio='Test Bio', skills='Test Skills'
        )  # Create a new job seeker profile
        self.assertEqual(jobseeker.user, user)  # Assert that the user is correct
        self.assertEqual(jobseeker.bio, 'Test Bio')  # Assert that the bio is correct
        self.assertEqual(jobseeker.skills, 'Test Skills')  # Assert that the skills are correct

    def test_registration_form_valid(self):
        """
        Test that the registration form is valid with valid data.
        """
        form_data = {
            'username': self.username,
            'password': self.password,
            'password2': self.password,
            'email': self.email,
            'user_type': 'jobseeker'
        }  # Create valid form data
        form = RegistrationForm(data=form_data)  # Create a RegistrationForm instance with the form data
        if not form.is_valid():  # Check if the form is valid
            print(form.errors)  # Print any form errors
        self.assertTrue(form.is_valid())  # Assert that the form is valid
        user = form.save(
            commit=False
        )  # Save the form data to create a new user (but don't commit to the database yet)
        user.set_password(self.password)  # Set the user's password
        user.save()  # Save the user to the database
        self.assertEqual(user.username, self.username)  # Assert that the username is correct
        self.assertEqual(user.email, self.email)  # Assert that the email is correct
        self.assertEqual(user.user_type, 'jobseeker')  # Assert that the user type is correct

    def test_registration_form_invalid(self):
        """
        Test that the registration form is invalid with invalid data.
        """
        form_data = {
            'username': self.username,
            'password': '',
            'email': self.email,
            'user_type': 'jobseeker'
        }  # Create invalid form data (empty password)
        form = RegistrationForm(data=form_data)  # Create a RegistrationForm instance with the form data
        self.assertFalse(form.is_valid())  # Assert that the form is invalid

================
File: accounts/urls.py
================
from django.urls import path
from . import views
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
    path('employer/profile/', views.edit_employer_profile, name='edit_employer_profile'),
    path('jobseeker/profile/', views.edit_jobseeker_profile, name='edit_jobseeker_profile'),
    path('profile/success/', views.profile_success, name='profile_success'),
    path('password_reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),
    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),
    path('password_reset/confirm/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'),
    path('password_reset/complete/', auth_views.PasswordResetCompleteView.as_view(), name='password_reset_complete'),
    path('api-token-auth/', views.obtain_auth_token, name='api_token_auth'),
]

================
File: accounts/views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.http import JsonResponse
from rest_framework.authtoken.models import Token
from django.views.decorators.csrf import csrf_exempt
import json
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.decorators import login_required
from .forms import RegistrationForm, EmployerProfileForm, JobSeekerProfileForm
from employers.models import Employer
from accounts.models import JobSeeker
from core.models import UserActivity


@csrf_exempt
def obtain_auth_token(request):
    """
    View to obtain an authentication token for API access.
    """
    if request.method == 'POST':  # Check if the request method is POST
        try:
            data = json.loads(request.body.decode('utf-8'))  # Parse the JSON request body
            username = data.get('username')  # Get the username from the request body
            password = data.get('password')  # Get the password from the request body
        except (json.JSONDecodeError, AttributeError):  # Handle JSON decoding errors
            return JsonResponse({'error': 'Invalid request body'}, status=400)  # Return an error response

        if not username or not password:  # Check if both username and password are provided
            return JsonResponse({'error': 'Please provide both username and password'}, status=400)  # Return an error response

        user = authenticate(username=username, password=password)  # Authenticate the user

        if user is not None:  # Check if the user is authenticated
            token, _ = Token.objects.get_or_create(user=user)  # Get or create a token for the user
            return JsonResponse({'token': token.key})  # Return the token
        else:
            return JsonResponse({'error': 'Invalid credentials'}, status=401)  # Return an error response

    else:
        return JsonResponse({'error': 'Only POST requests are allowed'}, status=405)  # Return an error response


def register(request):
    """
    View to register a new user.
    """
    if request.method == 'POST':  # Check if the request method is POST
        form = RegistrationForm(request.POST)  # Create a RegistrationForm instance with the POST data
        if form.is_valid():  # Check if the form is valid
            user = form.save()  # Save the form data to create a new user
            return redirect('login')  # Redirect to the login page
    else:
        form = RegistrationForm()  # Create an empty RegistrationForm instance
    return render(request, 'accounts/register.html', {'form': form})  # Render the registration form


def login_view(request):
    """
    View to log in an existing user.
    """
    if request.method == 'POST':  # Check if the request method is POST
        form = AuthenticationForm(request, data=request.POST)  # Create an AuthenticationForm instance with the POST data
        if form.is_valid():  # Check if the form is valid
            user = form.get_user()  # Get the user object from the form
            login(request, user)  # Log in the user
            UserActivity.objects.create(user=user, activity_type='login')  # Create a UserActivity record for the login
            return redirect('home')  # Redirect to the home page
    else:
        form = AuthenticationForm()  # Create an empty AuthenticationForm instance
    return render(request, 'accounts/login.html', {'form': form})  # Render the login form


@login_required  # Require the user to be logged in
def edit_employer_profile(request):
    """
    View to edit an employer profile.
    """
    try:
        employer_profile = request.user.employer  # Get the employer profile for the current user
    except Employer.DoesNotExist:  # Handle the case where the employer profile does not exist
        employer_profile = None  # Set employer_profile to None

    UserActivity.objects.create(user=request.user, activity_type='view_employer_profile')  # Create a UserActivity record for viewing the employer profile

    if request.method == 'POST':  # Check if the request method is POST
        form = EmployerProfileForm(request.POST, instance=employer_profile)  # Create an EmployerProfileForm instance with the POST data and the existing employer profile
        if form.is_valid():  # Check if the form is valid
            employer = form.save(commit=False)  # Save the form data to create a new employer profile
            employer.user = request.user  # Set the user for the employer profile
            employer.save()  # Save the employer profile
            return redirect('profile_success')  # Redirect to a success page
    else:
        form = EmployerProfileForm(instance=employer_profile)  # Create an EmployerProfileForm instance with the existing employer profile

    return render(request, 'accounts/edit_employer_profile.html', {'form': form, 'employer_profile': employer_profile})  # Render the edit employer profile form


@login_required  # Require the user to be logged in
def profile_success(request):
    """
    View to display a success message after profile update.
    """
    return render(request, 'accounts/profile_success.html')  # Render the profile success template


@login_required  # Require the user to be logged in
def edit_jobseeker_profile(request):
    """
    View to edit a job seeker profile.
    """
    try:
        jobseeker_profile = request.user.jobseeker  # Get the job seeker profile for the current user
    except JobSeeker.DoesNotExist:  # Handle the case where the job seeker profile does not exist
        jobseeker_profile = None  # Set jobseeker_profile to None

    UserActivity.objects.create(user=request.user, activity_type='view_jobseeker_profile')  # Create a UserActivity record for viewing the job seeker profile

    if request.method == 'POST':  # Check if the request method is POST
        form = JobSeekerProfileForm(request.POST, instance=jobseeker_profile)  # Create a JobSeekerProfileForm instance with the POST data and the existing job seeker profile
        if form.is_valid():  # Check if the form is valid
            jobseeker = form.save(commit=False)  # Save the form data to create a new job seeker profile
            jobseeker.user = request.user  # Set the user for the job seeker profile
            jobseeker.save()  # Save the job seeker profile
            return redirect('profile_success')  # Redirect to a success page
    else:
        form = JobSeekerProfileForm(instance=jobseeker_profile)  # Create a JobSeekerProfileForm instance with the existing job seeker profile

    return render(request, 'accounts/edit_jobseeker_profile.html', {'form': form, 'jobseeker_profile': jobseeker_profile})  # Render the edit job seeker profile form


def logout_view(request):
    """
    View to log out the current user.
    """
    logout(request)  # Log out the user
    return redirect('home')  # Redirect to the home page

================
File: applications/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-03-03 23:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_employer_company_description_employer_logo_and_more'),
        ('jobs', '0005_alter_job_applications_alter_job_created_at_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('reviewed', 'Reviewed'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='submitted', max_length=20)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
                ('job_seeker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.jobseeker')),
            ],
        ),
    ]

================
File: applications/admin.py
================
from django.contrib import admin
from .models import Application

class ApplicationAdmin(admin.ModelAdmin):
    list_display = ('job', 'job_seeker', 'application_date', 'status')
    list_filter = ('status', 'application_date')
    search_fields = ('job__title', 'job_seeker__user__username')

admin.site.register(Application, ApplicationAdmin)

================
File: applications/apps.py
================
from django.apps import AppConfig


class ApplicationsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'applications'  # Configuration for the applications app

================
File: applications/forms.py
================
from django import forms
from .models import Application

class ApplicationForm(forms.ModelForm):
    class Meta:
        model = Application
        fields = ['status']

================
File: applications/models.py
================
from django.db import models
from jobs.models import Job  # Import the Job model from the jobs app
from accounts.models import JobSeeker  # Import the JobSeeker model from the accounts app

class Application(models.Model):
    """
    Model representing a job application.
    """
    job = models.ForeignKey(Job, on_delete=models.CASCADE)  # Foreign key to the Job model
    job_seeker = models.ForeignKey(JobSeeker, on_delete=models.CASCADE)  # Foreign key to the JobSeeker model
    application_date = models.DateTimeField(auto_now_add=True)  # Date and time when the application was submitted
    status = models.CharField(max_length=50, default='Pending')  # Status of the application (e.g., Pending, Accepted, Rejected)

    STATUS_CHOICES = (
        ('submitted', 'Submitted'),
        ('reviewed', 'Reviewed'),
        ('accepted', 'Accepted'),
        ('rejected', 'Rejected'),
    )
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='submitted')

    def __str__(self):
        """
        Returns a string representation of the application.
        """
        return f"Application for {self.job.title} by {self.job_seeker.user.username}"

================
File: applications/tests.py
================
from django.test import TestCase  # Import the TestCase class
from django.contrib.auth import get_user_model  # Import the get_user_model function
from .models import Application  # Import the Application model
from jobs.models import Job  # Import the Job model
from accounts.models import Employer, JobSeeker  # Import the Employer and JobSeeker models
from .forms import ApplicationForm  # Import the ApplicationForm

User = get_user_model()  # Get the User model

class ApplicationTests(TestCase):
    """
    Tests for the application management functionality.
    """
    def setUp(self):
        """
        Set up data for the tests.
        """
        self.employer_username = 'testemployer'  # Username for the employer user
        self.employer_password = 'testpassword'  # Password for the employer user
        self.employer_email = 'testemployer@example.com'  # Email for the employer user
        self.employer_user = User.objects.create_user(username=self.employer_username, password=self.employer_password, email=self.employer_email, user_type='employer')  # Create an employer user
        self.employer = Employer.objects.create(user=self.employer_user, company_name='Test Company')  # Create an employer profile

        self.jobseeker_username = 'testjobseeker'  # Username for the job seeker user
        self.jobseeker_password = 'testpassword'  # Password for the job seeker user
        self.jobseeker_email = 'testjobseeker@example.com'  # Email for the job seeker user
        self.jobseeker_user = User.objects.create_user(username=self.jobseeker_username, password=self.jobseeker_password, email=self.jobseeker_email, user_type='jobseeker')  # Create a job seeker user
        self.jobseeker = JobSeeker.objects.create(user=self.jobseeker_user)  # Create a job seeker profile

        self.job = Job.objects.create(employer=self.employer, title='Test Job', description='Test Description', location='Test Location', salary='$100,000')  # Create a job listing

    def test_jobseeker_apply_for_job(self):
        """
        Test that a job seeker can apply for a job successfully.
        """
        self.client.login(username=self.jobseeker_username, password=self.jobseeker_password)  # Log in as the job seeker
        response = self.client.get(f'/applications/apply/{self.job.id}/')  # Apply for the job
        self.assertEqual(response.status_code, 302)  # Expect a redirect
        self.assertEqual(Application.objects.count(), 1)  # Check that an application was created

    def test_employer_view_applications(self):
        """
        Test that an employer can view applications for a job successfully.
        """
        Application.objects.create(job=self.job, job_seeker=self.jobseeker)  # Create an application
        self.client.login(username=self.employer_username, password=self.employer_password)  # Log in as the employer
        response = self.client.get(f'/applications/employer/{self.job.id}/')  # View the applications for the job
        self.assertEqual(response.status_code, 200)  # Expect a 200 OK
        self.assertEqual(len(response.context['applications']), 1)  # Check that the application is in the context

    def test_employer_update_application_status(self):
        """
        Test that an employer can update the status of an application successfully.
        """
        application = Application.objects.create(job=self.job, job_seeker=self.jobseeker)  # Create an application
        self.client.login(username=self.employer_username, password=self.employer_password)  # Log in as the employer
        response = self.client.post(f'/applications/{application.id}/update_status/', {'status': 'Accepted'})  # Update the application status
        self.assertEqual(response.status_code, 302)  # Expect a redirect
        application.refresh_from_db()  # Refresh the application from the database
        self.assertEqual(application.status, 'Accepted')  # Check that the status was updated

================
File: applications/urls.py
================
from django.urls import path
from django.views.generic import TemplateView
from . import views

urlpatterns = [
    path('apply/<int:job_id>/', views.apply_for_job, name='apply_for_job'),
    path('employer/<int:job_id>/', views.employer_applications, name='employer_applications'),
    path('<int:pk>/', views.application_detail, name='application_detail'),
    path('<int:pk>/update_status/', views.update_application_status, name='update_application_status'),
    path('success/', TemplateView.as_view(template_name='applications/application_success.html'), name='application_success'),
    path('failure/', TemplateView.as_view(template_name='applications/application_failure.html'), name='application_failure'),
]

================
File: applications/views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from .models import Application
from jobs.models import Job
from accounts.models import JobSeeker
from django.shortcuts import render, redirect, get_object_or_404  # Import necessary modules
from django.contrib.auth.decorators import (
    login_required,
    user_passes_test,
)  # Import decorators for authentication and authorization
from .models import Application  # Import the Application model
from jobs.models import Job  # Import the Job model
from accounts.models import JobSeeker  # Import the JobSeeker model
from .forms import ApplicationForm  # Import the ApplicationForm
from core.models import UserActivity  # Import the UserActivity model


@login_required  # Require the user to be logged in
def apply_for_job(request, job_id):
    """
    Allows a job seeker to apply for a job.
    """
    job = get_object_or_404(
        Job, pk=job_id
    )  # Get the job object or return a 404 error if not found
    if request.user.user_type == 'jobseeker':  # Check if the user is a job seeker
        job_seeker = JobSeeker.objects.get(
            user=request.user
        )  # Get the job seeker profile for the current user
        Application.objects.create(
            job=job, job_seeker=job_seeker
        )  # Create a new application
        job.applications += 1  # Increment the application count for the job
        job.save()  # Save the job object
        UserActivity.objects.create(
            user=request.user, activity_type='application_submitted', details={'job_id': job.pk, 'job_title': job.title}
        )
        return redirect(
            'application_success'
        )  # Redirect to the application success page
    else:
        return redirect(
            'application_failure'
        )  # Redirect to the application failure page


@login_required  # Require the user to be logged in
@user_passes_test(
    lambda u: u.user_type == 'employer'
)  # Require the user to be an employer
def employer_applications(request, job_id):
    """
    Lists all applications for a specific job.
    """
    job = get_object_or_404(
        Job, pk=job_id
    )  # Get the job object or return a 404 error if not found
    applications = Application.objects.filter(
        job=job
    )  # Get all applications for the job
    return render(
        request,
        'applications/employer_applications.html',
        {'job': job, 'applications': applications},
    )  # Render the employer applications template


@login_required  # Require the user to be logged in
@user_passes_test(
    lambda u: u.user_type == 'employer'
)  # Require the user to be an employer
def application_detail(request, pk):
    """
    Displays a single application.
    """
    application = get_object_or_404(
        Application, pk=pk
    )  # Get the application object or return a 404 error if not found
    return render(
        request, 'applications/application_detail.html', {'application': application}
    )  # Render the application detail template


@login_required  # Require the user to be logged in
@user_passes_test(
    lambda u: u.user_type == 'employer'
)  # Require the user to be an employer
def update_application_status(request, pk):
    """
    Updates the status of an application.
    """
    application = get_object_or_404(
        Application, pk=pk
    )  # Get the application object or return a 404 error if not found
    if request.method == 'POST':  # Check if the request method is POST
        form = ApplicationForm(
            request.POST, instance=application
        )  # Create an ApplicationForm instance with the POST data and the existing application
        if form.is_valid():  # Check if the form is valid
            application = form.save()  # Save the form data to update the application
            return redirect(
                'application_detail', pk=application.pk
            )  # Redirect to the application detail page
    else:
        form = ApplicationForm(
            instance=application
        )  # Create an ApplicationForm instance with the existing application
    return render(
        request,
        'applications/update_application_status.html',
        {'form': form, 'application': application},
    )  # Render the update application status template

================
File: backup/accounts/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 09:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('employer', 'Employer'), ('jobseeker', 'Job Seeker')], default='jobseeker', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobSeeker',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('bio', models.TextField(blank=True)),
                ('resume', models.FileField(blank=True, upload_to='resumes/')),
                ('skills', models.CharField(blank=True, max_length=200)),
            ],
        ),
    ]

================
File: backup/accounts/migrations/0002_employer_company_description_employer_logo_and_more.py
================
# Generated by Django 4.2 on 2025-02-10 17:13

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='employer',
            name='company_description',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='employer',
            name='logo',
            field=models.ImageField(blank=True, upload_to='employer_logos/'),
        ),
        migrations.AddField(
            model_name='employer',
            name='website',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='jobseeker',
            name='bio',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='jobseeker',
            name='resume',
            field=models.FileField(blank=True, upload_to='resumes/'),
        ),
        migrations.AddField(
            model_name='jobseeker',
            name='skills',
            field=models.CharField(blank=True, max_length=200),
        ),
    ]

================
File: backup/employers/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 09:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='employer_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=200)),
                ('company_description', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, upload_to='employer_logos/')),
            ],
        ),
    ]

================
File: backup/jobs/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 09:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('employers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(blank=True, max_length=200)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('location', models.CharField(max_length=100)),
                ('salary', models.CharField(max_length=50)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('image', models.ImageField(blank=True, upload_to='job_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='employers.employer')),
            ],
        ),
    ]

================
File: backup/jobs/migrations/0002_job_industry.py
================
# Generated by Django 4.2 on 2025-02-10 22:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='job',
            name='industry',
            field=models.CharField(blank=True, max_length=100),
        ),
    ]

================
File: backup/jobs/migrations/0002_job_views.py
================
# Generated by Django 4.2 on 2025-02-11 20:23

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='job',
            name='views',
            field=models.IntegerField(default=0),
        ),
    ]

================
File: backup/jobs/migrations/0003_job_applications.py
================
# Generated by Django 4.2 on 2025-02-11 21:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0002_job_views'),
    ]

    operations = [
        migrations.AddField(
            model_name='job',
            name='applications',
            field=models.IntegerField(default=0),
        ),
    ]

================
File: backup/jobs/migrations/0003_savedsearch.py
================
# Generated by Django 4.2 on 2025-02-10 22:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('jobs', '0002_job_industry'),
    ]

    operations = [
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(blank=True, max_length=200)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: backup/jobs/migrations/0004_merge_0003_job_applications_0003_savedsearch.py
================
# Generated by Django 4.2 on 2025-02-23 23:17

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0003_job_applications'),
        ('jobs', '0003_savedsearch'),
    ]

    operations = [
    ]

================
File: core/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 21:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: core/migrations/0002_alter_useractivity_activity_type_and_more.py
================
# Generated by Django 4.2 on 2025-03-03 23:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='useractivity',
            name='activity_type',
            field=models.CharField(choices=[('login', 'Login'), ('job_search', 'Job Search'), ('job_view', 'Job View'), ('application_submitted', 'Application Submitted'), ('employer_profile_view', 'Employer Profile View')], help_text='Type of user activity (e.g., login, job_search)', max_length=255),
        ),
        migrations.AlterField(
            model_name='useractivity',
            name='details',
            field=models.JSONField(blank=True, help_text='Additional details about the activity', null=True),
        ),
        migrations.AlterField(
            model_name='useractivity',
            name='timestamp',
            field=models.DateTimeField(auto_now_add=True, help_text='Date and time of the activity'),
        ),
        migrations.AlterField(
            model_name='useractivity',
            name='user',
            field=models.ForeignKey(help_text='Foreign key to the User model', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: core/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: core/apps.py
================
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

================
File: core/models.py
================
from django.db import models  # Import the models module
from django.contrib.auth import get_user_model  # Import the get_user_model function

User = get_user_model()  # Get the User model

class UserActivity(models.Model):
    """
    Model representing user activity for analytics.
    """
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        help_text="Foreign key to the User model",
    )  # Foreign key to the User model
    activity_type = models.CharField(
        max_length=255,
        help_text="Type of user activity (e.g., login, job_search)",
        choices=[
            ('login', 'Login'),
            ('job_search', 'Job Search'),
            ('job_view', 'Job View'),
            ('application_submitted', 'Application Submitted'),
            ('employer_profile_view', 'Employer Profile View'),
        ]
    )  # Type of user activity (e.g., login, job_search, profile_view)
    timestamp = models.DateTimeField(
        auto_now_add=True,
        help_text="Date and time of the activity"
    )  # Date and time of the activity
    details = models.JSONField(
        blank=True, null=True,
        help_text="Additional details about the activity"
    )  # Additional details about the activity (e.g., search query)

    def __str__(self):
        """
        Returns a string representation of the user activity.
        """
        return f"{self.user.username} - {self.activity_type} - {self.timestamp}"

================
File: core/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: core/utils.py
================
import logging

# Get an instance of a logger
logger = logging.getLogger(__name__)

def log_error(message, exception=None):
    """
    Logs an error message with optional exception information.
    """
    if exception:
        logger.error(message, exc_info=True)
    else:
        logger.error(message)

def log_info(message):
    """
    Logs an info message.
    """
    logger.info(message)

def log_warning(message):
    """
    Logs a warning message.
    """
    logger.warning(message)

================
File: core/views.py
================
from django.shortcuts import render  # Import the render function

# Create your views here.

================
File: docs/adr/template.md
================
## Architecture Decision Record (ADR) Template

### Title

[Descriptive title of the ADR]

### Status

[Proposed | Approved | Rejected | Deprecated | Superseded]

### Context

[Explain the background and the problem that this decision addresses.]

### Decision

[Describe the chosen option and the rationale behind it.]

### Consequences

[Describe the positive and negative consequences of the decision.]

================
File: employers/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 09:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='employer_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=200)),
                ('company_description', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, upload_to='employer_logos/')),
            ],
        ),
    ]

================
File: employers/migrations/0002_alter_employer_company_description_and_more.py
================
# Generated by Django 4.2 on 2025-03-03 23:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('employers', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='employer',
            name='company_description',
            field=models.TextField(blank=True, help_text='Description of the company'),
        ),
        migrations.AlterField(
            model_name='employer',
            name='company_name',
            field=models.CharField(help_text='Name of the company', max_length=200),
        ),
        migrations.AlterField(
            model_name='employer',
            name='logo',
            field=models.ImageField(blank=True, help_text='Logo of the company', upload_to='employer_logos/'),
        ),
        migrations.AlterField(
            model_name='employer',
            name='user',
            field=models.OneToOneField(help_text='One-to-one relationship with the User model', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='employer_profile', serialize=False, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='employer',
            name='website',
            field=models.URLField(blank=True, help_text='Website URL of the company'),
        ),
    ]

================
File: employers/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: employers/apps.py
================
from django.apps import AppConfig


class EmployersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'employers'  # Configuration for the employers app

================
File: employers/forms.py
================
from django import forms
from .models import Employer

class EmployerForm(forms.ModelForm):
    class Meta:
        model = Employer  # Associate with the Employer model
        fields = [
            'company_name',
            'company_description',
            'website',
            'logo'
        ]  # Specify the fields to include

================
File: employers/models.py
================
from django.db import models  # Import the models module
from accounts.models import User  # Import the User model

class Employer(models.Model):
    """
    Model representing an Employer profile.
    """
    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        primary_key=True,
        related_name='employer_profile',
        help_text="One-to-one relationship with the User model"
    )  # One-to-one relationship with the User model
    company_name = models.CharField(
        max_length=200,
        help_text="Name of the company"
    )  # Name of the company
    company_description = models.TextField(
        blank=True,
        help_text="Description of the company"
    )  # Description of the company
    website = models.URLField(
        blank=True,
        help_text="Website URL of the company"
    )  # Website URL of the company
    logo = models.ImageField(
        upload_to='employer_logos/', blank=True,
        help_text="Logo of the company"
    )  # Logo of the company

    def __str__(self):
        """
        Returns a string representation of the employer (company name).
        """
        return self.company_name

================
File: employers/tests.py
================
from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import Employer
from accounts.models import User

User = get_user_model()

class EmployerProfileTests(TestCase):
    """
    Tests for the employer profile functionality.
    """
    def setUp(self):
        """
        Set up data for the tests.
        """
        self.username = 'testemployer'  # Define a test username
        self.password = 'testpassword'  # Define a test password
        self.email = 'testemployer@example.com'  # Define a test email
        self.user = User.objects.create_user(
            username=self.username, password=self.password, email=self.email, user_type='employer'
        )  # Create an employer user

    def test_employer_profile_creation(self):
        """
        Test that an employer profile can be created successfully.
        """
        employer = Employer.objects.create(
            user=self.user, company_name='Test Company', company_description='Test Description', website='https://www.example.com'
        )  # Create a new employer profile
        self.assertEqual(employer.company_name, 'Test Company')  # Assert that the company name is correct
        self.assertEqual(employer.company_description, 'Test Description')  # Assert that the company description is correct
        self.assertEqual(employer.website, 'https://www.example.com')  # Assert that the website is correct

    def test_employer_profile_editing(self):
        """
        Test that an employer profile can be edited successfully.
        """
        employer = Employer.objects.create(
            user=self.user, company_name='Test Company', company_description='Test Description', website='https://www.example.com'
        )  # Create a new employer profile
        employer.company_name = 'Updated Test Company'  # Update the company name
        employer.save()  # Save the updated employer profile
        self.assertEqual(employer.company_name, 'Updated Test Company')  # Assert that the company name was updated

    def test_employer_profile_detail(self):
        """
        Test that an employer profile detail view returns the correct employer.
        """
        employer = Employer.objects.create(
            user=self.user, company_name='Test Company', company_description='Test Description', website='https://www.example.com'
        )  # Create a new employer profile
        response = self.client.get(
            f'/employers/{employer.pk}/'
        )  # Get the employer profile detail view
        self.assertEqual(response.status_code, 200)  # Assert that the response status code is 200 OK
        self.assertEqual(response.context['employer'], employer)  # Assert that the employer object is in the context

================
File: employers/urls.py
================
from django.urls import path
from . import views

urlpatterns = [
    path('create/', views.employer_profile_create, name='employer_profile_create'),
    path('<int:pk>/edit/', views.employer_profile_edit, name='employer_profile_edit'),
    path('<int:pk>/', views.employer_profile_detail, name='employer_profile_detail'),
]

================
File: employers/views.py
================
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Employer
from .forms import EmployerForm  # Import the EmployerForm
from core.models import UserActivity

@login_required  # Require the user to be logged in
def employer_profile_create(request):
    """
    View to create a new employer profile.
    """
    if request.method == 'POST':  # Check if the request method is POST
        form = EmployerForm(
            request.POST, request.FILES
        )  # Create an EmployerForm instance with the POST data and files
        if form.is_valid():  # Check if the form is valid
            employer = form.save(
                commit=False
            )  # Save the form data to create a new employer profile
            employer.user = request.user  # Set the user for the employer profile
            employer.save()  # Save the employer profile
            return redirect(
                'employer_profile_detail', pk=employer.pk
            )  # Redirect to the employer profile detail page
    else:
        form = EmployerForm()  # Create an empty EmployerForm instance
    return render(
        request, 'employers/employer_profile_create.html', {'form': form}
    )  # Render the employer profile create template


@login_required  # Require the user to be logged in
def employer_profile_edit(request, pk):
    """
    View to edit an existing employer profile.
    """
    employer = get_object_or_404(
        Employer, pk=pk, user=request.user
    )  # Get the employer object or return a 404 error if not found
    if request.method == 'POST':  # Check if the request method is POST
        form = EmployerForm(
            request.POST, request.FILES, instance=employer
        )  # Create an EmployerForm instance with the POST data, files, and the existing employer profile
        if form.is_valid():  # Check if the form is valid
            form.save()  # Save the form data to update the employer profile
            return redirect(
                'employer_profile_detail', pk=employer.pk
            )  # Redirect to the employer profile detail page
    else:
        form = EmployerForm(
            instance=employer
        )  # Create an EmployerForm instance with the existing employer profile
    return render(
        request,
        'employers/employer_profile_edit.html',
        {'form': form, 'employer': employer},
    )  # Render the employer profile edit template


def employer_profile_detail(request, pk):
    """
    Displays the details of a specific employer profile.
    """
    employer = get_object_or_404(
        Employer, pk=pk
    )  # Get the employer object or return a 404 error if not found
    if request.user.is_authenticated:
        UserActivity.objects.create(
            user=request.user, activity_type='employer_profile_view', details={'employer_id': employer.pk, 'employer_name': employer.company_name}
        )
    return render(
        request, 'employers/employer_profile_detail.html', {'employer': employer}
    )  # Render the employer profile detail template

================
File: jobs/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 09:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('employers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(blank=True, max_length=200)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('location', models.CharField(max_length=100)),
                ('salary', models.CharField(max_length=50)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('image', models.ImageField(blank=True, upload_to='job_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='employers.employer')),
            ],
        ),
    ]

================
File: jobs/migrations/0002_job_industry.py
================
# Generated by Django 4.2 on 2025-02-10 22:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='job',
            name='industry',
            field=models.CharField(blank=True, max_length=100),
        ),
    ]

================
File: jobs/migrations/0002_job_views.py
================
# Generated by Django 4.2 on 2025-02-11 20:23

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='job',
            name='views',
            field=models.IntegerField(default=0),
        ),
    ]

================
File: jobs/migrations/0003_job_applications.py
================
# Generated by Django 4.2 on 2025-02-11 21:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0002_job_views'),
    ]

    operations = [
        migrations.AddField(
            model_name='job',
            name='applications',
            field=models.IntegerField(default=0),
        ),
    ]

================
File: jobs/migrations/0003_savedsearch.py
================
# Generated by Django manually

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("jobs", "0002_job_industry"),
    ]

    operations = [
        # This is a placeholder migration to replace the problematic one
        # No actual operations needed - table already exists
    ]

================
File: jobs/migrations/0004_merge_0003_job_applications_0003_savedsearch.py
================
# Generated by Django 4.2 on 2025-02-23 23:17

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0003_job_applications'),
        ('jobs', '0003_savedsearch'),
    ]

    operations = [
    ]

================
File: jobs/migrations/0005_alter_job_applications_alter_job_created_at_and_more.py
================
# Generated by Django 4.2 on 2025-03-03 23:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('employers', '0002_alter_employer_company_description_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('jobs', '0004_merge_0003_job_applications_0003_savedsearch'),
    ]

    operations = [
        migrations.AlterField(
            model_name='job',
            name='applications',
            field=models.IntegerField(default=0, help_text='Number of applications for the job'),
        ),
        migrations.AlterField(
            model_name='job',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Date and time when the job was created'),
        ),
        migrations.AlterField(
            model_name='job',
            name='description',
            field=models.TextField(help_text='Description of the job'),
        ),
        migrations.AlterField(
            model_name='job',
            name='employer',
            field=models.ForeignKey(help_text='Foreign key to the Employer model', on_delete=django.db.models.deletion.CASCADE, to='employers.employer'),
        ),
        migrations.AlterField(
            model_name='job',
            name='image',
            field=models.ImageField(blank=True, help_text='Image for the job (optional)', upload_to='job_images/'),
        ),
        migrations.AlterField(
            model_name='job',
            name='industry',
            field=models.CharField(blank=True, help_text='Industry of the job (optional)', max_length=100),
        ),
        migrations.AlterField(
            model_name='job',
            name='location',
            field=models.CharField(help_text='Location of the job', max_length=100),
        ),
        migrations.AlterField(
            model_name='job',
            name='salary',
            field=models.CharField(help_text='Salary for the job', max_length=50),
        ),
        migrations.AlterField(
            model_name='job',
            name='title',
            field=models.CharField(help_text='Title of the job', max_length=200),
        ),
        migrations.AlterField(
            model_name='job',
            name='views',
            field=models.IntegerField(default=0, help_text='Number of views for the job'),
        ),
        migrations.AlterField(
            model_name='savedsearch',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Date and time when the search was saved'),
        ),
        migrations.AlterField(
            model_name='savedsearch',
            name='industry',
            field=models.CharField(blank=True, help_text='Industry for the search (optional)', max_length=100),
        ),
        migrations.AlterField(
            model_name='savedsearch',
            name='query',
            field=models.CharField(blank=True, help_text='Search query (optional)', max_length=200),
        ),
        migrations.AlterField(
            model_name='savedsearch',
            name='user',
            field=models.ForeignKey(help_text='Foreign key to the User model', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: jobs/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: jobs/apps.py
================
from django.apps import AppConfig


class JobsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'jobs'  # Configuration for the jobs app

================
File: jobs/forms.py
================
from django import forms  # Import the forms module
from .models import Job, SavedSearch  # Import the Job and SavedSearch models


class JobForm(forms.ModelForm):
    """
    Form for creating and editing job listings.
    """

    class Meta:
        model = Job  # Associate with the Job model
        fields = [
            'title',
            'description',
            'location',
            'salary',
            'industry',
            'image',
        ]  # Specify the fields to include


class SavedSearchForm(forms.ModelForm):
    """
    Form for saving search queries.
    """

    class Meta:
        model = SavedSearch  # Associate with the SavedSearch model
        fields = ['query', 'industry']  # Specify the fields to include

================
File: jobs/models.py
================
from django.db import models  # Import the models module
from employers.models import Employer  # Import the Employer model

class Job(models.Model):
    """
    Model representing a job listing.
    """
    employer = models.ForeignKey(
        Employer, on_delete=models.CASCADE, help_text="Foreign key to the Employer model"
    )  # Foreign key to the Employer model
    title = models.CharField(
        max_length=200, help_text="Title of the job"
    )  # Title of the job
    description = models.TextField(help_text="Description of the job")  # Description of the job
    location = models.CharField(
        max_length=100, help_text="Location of the job"
    )  # Location of the job
    salary = models.CharField(max_length=50, help_text="Salary for the job")  # Salary for the job
    industry = models.CharField(
        max_length=100, blank=True, help_text="Industry of the job (optional)"
    )  # Industry of the job (optional)
    image = models.ImageField(
        upload_to="job_images/", blank=True, help_text="Image for the job (optional)"
    )  # Image for the job (optional)
    created_at = models.DateTimeField(
        auto_now_add=True, help_text="Date and time when the job was created"
    )  # Date and time when the job was created
    views = models.IntegerField(
        default=0, help_text="Number of views for the job"
    )  # Number of views for the job
    applications = models.IntegerField(
        default=0, help_text="Number of applications for the job"
    )  # Number of applications for the job

    def __str__(self):
        """
        Returns a string representation of the job (title).
        """
        return self.title


class SavedSearch(models.Model):
    """
    Model representing a saved search query.
    """
    user = models.ForeignKey(
        "accounts.User", on_delete=models.CASCADE, help_text="Foreign key to the User model"
    )  # Foreign key to the User model
    query = models.CharField(
        max_length=200, blank=True, help_text="Search query (optional)"
    )  # Search query (optional)
    industry = models.CharField(
        max_length=100, blank=True, help_text="Industry for the search (optional)"
    )  # Industry for the search (optional)
    created_at = models.DateTimeField(
        auto_now_add=True, help_text="Date and time when the search was saved"
    )  # Date and time when the search was saved

    def __str__(self):
        """
        Returns a string representation of the saved search.
        """
        return f"Saved Search: {self.query} - {self.industry}"

================
File: jobs/serializers.py
================
from rest_framework import serializers
from .models import Job

class JobSerializer(serializers.ModelSerializer):
    class Meta:
        model = Job
        fields = '__all__'

================
File: jobs/tests.py
================
from django.test import TestCase
from django.contrib.auth import get_user_model
from .models import Job, SavedSearch
from accounts.models import Employer

User = get_user_model()

class JobManagementTests(TestCase):
    """
    Tests for the job management functionality.
    """
    def setUp(self):
        """
        Set up data for the tests.
        """
        self.username = 'testuser'  # Define a test username
        self.password = 'testpassword'  # Define a test password
        self.email = 'test@example.com'  # Define a test email
        self.user = User.objects.create_user(
            username=self.username, password=self.password, email=self.email, user_type='employer'
        )  # Create an employer user
        self.employer = Employer.objects.create(
            user=self.user, company_name='Test Company'
        )  # Create an employer profile

    def test_job_creation(self):
        """
        Test that a job can be created successfully.
        """
        job = Job.objects.create(
            employer=self.employer, title='Test Job', description='Test Description', location='Test Location', salary='$100,000'
        )  # Create a new job
        self.assertEqual(job.title, 'Test Job')  # Assert that the title is correct
        self.assertEqual(job.description, 'Test Description')  # Assert that the description is correct
        self.assertEqual(job.location, 'Test Location')  # Assert that the location is correct
        self.assertEqual(job.salary, '$100,000')  # Assert that the salary is correct

    def test_job_editing(self):
        """
        Test that a job can be edited successfully.
        """
        job = Job.objects.create(
            employer=self.employer, title='Test Job', description='Test Description', location='Test Location', salary='$100,000'
        )  # Create a new job
        job.title = 'Updated Test Job'  # Update the job title
        job.save()  # Save the updated job
        self.assertEqual(job.title, 'Updated Test Job')  # Assert that the title was updated

    def test_saved_search_creation(self):
        """
        Test that a saved search can be created successfully.
        """
        saved_search = SavedSearch.objects.create(
            user=self.user, query='Test Query', industry='Test Industry'
        )  # Create a new saved search
        self.assertEqual(saved_search.query, 'Test Query')  # Assert that the query is correct
        self.assertEqual(saved_search.industry, 'Test Industry')  # Assert that the industry is correct

    def test_saved_search_deletion(self):
        """
        Test that a saved search can be deleted successfully.
        """
        saved_search = SavedSearch.objects.create(
            user=self.user, query='Test Query', industry='Test Industry'
        )  # Create a new saved search
        saved_search.delete()  # Delete the saved search
        self.assertEqual(SavedSearch.objects.count(), 0)  # Assert that the saved search was deleted

================
File: jobs/urls.py
================
from django.urls import path
from jobs.views import JobListAPIView, JobDetailAPIView, job_create, job_edit, job_list, job_detail, saved_searches, save_search, delete_saved_search

urlpatterns = [
    path('create/', job_create, name='job_create'),
    path('<int:pk>/edit/', job_edit, name='job_edit'),
    path('', job_list, name='job_list'),
    path('<int:pk>/', job_detail, name='job_detail'),
    path('saved_searches/', saved_searches, name='saved_searches'),
    path('save_search/', save_search, name='save_search'),
    path('delete_saved_search/<int:pk>/', delete_saved_search, name='delete_saved_search'),
    path('api/jobs/', JobListAPIView.as_view(), name='job_list_api'),
    path('api/jobs/<int:pk>/', JobDetailAPIView.as_view(), name='job_detail_api'),
]

================
File: jobs/views.py
================
from django.shortcuts import render, redirect, get_object_or_404  # Import necessary modules
from django.contrib.auth.decorators import login_required  # Import the login_required decorator
from .models import Job, SavedSearch  # Import the Job and SavedSearch models
from .forms import JobForm, SavedSearchForm  # Import the JobForm and SavedSearchForm
from core.models import UserActivity  # Import the UserActivity model
from rest_framework import generics
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import TokenAuthentication
from rest_framework.decorators import api_view, authentication_classes, permission_classes
from django_ratelimit.decorators import ratelimit
from .serializers import JobSerializer

@ratelimit(key='ip', rate='5/m', method='GET')
class JobListAPIView(generics.ListAPIView):
    queryset = Job.objects.all()
    serializer_class = JobSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

@ratelimit(key='ip', rate='5/m', method='GET')
class JobDetailAPIView(generics.RetrieveAPIView):
    queryset = Job.objects.all()
    serializer_class = JobSerializer
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

@login_required  # Require the user to be logged in
def job_create(request):
    """
    View to create a new job listing.
    """
    if request.method == 'POST':  # Check if the request method is POST
        form = JobForm(
            request.POST, request.FILES
        )  # Create a JobForm instance with the POST data and files
        if form.is_valid():  # Check if the form is valid
            job = form.save(
                commit=False
            )  # Save the form data to create a new job listing
            job.employer = request.user.employer  # Set the employer for the job listing
            job.save()  # Save the job listing
            return redirect(
                'job_detail', pk=job.pk
            )  # Redirect to the job detail page
    else:
        form = JobForm()  # Create an empty JobForm instance
    return render(
        request, 'jobs/job_create.html', {'form': form}
    )  # Render the job create template


@login_required  # Require the user to be logged in
def job_edit(request, pk):
    """
    View to edit an existing job listing.
    """
    job = get_object_or_404(
        Job, pk=pk
    )  # Get the job object or return a 404 error if not found
    if request.method == 'POST':  # Check if the request method is POST
        form = JobForm(
            request.POST, request.FILES, instance=job
        )  # Create a JobForm instance with the POST data, files, and the existing job listing
        if form.is_valid():  # Check if the form is valid
            job = form.save()  # Save the form data to update the job listing
            return redirect(
                'job_detail', pk=job.pk
            )  # Redirect to the job detail page
    else:
        form = JobForm(
            instance=job
        )  # Create a JobForm instance with the existing job listing
    return render(
        request, 'jobs/job_edit.html', {'form': form, 'job': job}
    )  # Render the job edit template


def job_list(request):
    """
    Lists all job listings based on search criteria.
    """
    query = request.GET.get('q')  # Get the search query from the request
    industry = request.GET.get('industry')  # Get the industry from the request
    jobs = Job.objects.all()  # Get all job objects

    if query:  # Check if a query is provided
        jobs = jobs.filter(
            title__icontains=query
        )  # Filter jobs by title if a query is provided

    if industry:  # Check if an industry is provided
        jobs = jobs.filter(
            industry=industry
        )  # Filter jobs by industry if an industry is provided

    if request.user.is_authenticated:  # Check if the user is authenticated
        search_details = {
            'query': query,
            'industry': industry,
        }  # Create a dictionary with the search details
        UserActivity.objects.create(
            user=request.user, activity_type='job_search', details=search_details
        )  # Create a UserActivity record for the job search

    return render(
        request, 'jobs/job_list.html', {'jobs': jobs}
    )  # Render the job list template


@login_required  # Require the user to be logged in
def save_search(request):
    """
    Saves a search query for a user.
    """
    if request.method == 'POST':  # Check if the request method is POST
        form = SavedSearchForm(
            request.POST
        )  # Create a SavedSearchForm instance with the POST data
        if form.is_valid():  # Check if the form is valid
            saved_search = form.save(
                commit=False
            )  # Save the form data to create a new saved search
            saved_search.user = request.user  # Set the user for the saved search
            saved_search.save()  # Save the saved search
            return redirect(
                'saved_searches'
            )  # Render the saved searches page
    else:
        form = SavedSearchForm()  # Create an empty SavedSearchForm instance
    return render(
        request, 'jobs/save_search.html', {'form': form}
    )  # Render the save search template


@login_required  # Require the user to be logged in
def saved_searches(request):
    """
    Lists all saved searches for a user.
    """
    saved_searches = SavedSearch.objects.filter(
        user=request.user
    )  # Get all saved searches for the current user
    return render(
        request, 'jobs/saved_searches.html', {'saved_searches': saved_searches}
    )  # Render the saved searches template


@login_required  # Require the user to be logged in
def delete_saved_search(request, pk):
    """
    Deletes a saved search.
    """
    saved_search = get_object_or_404(
        SavedSearch, pk=pk, user=request.user
    )  # Get the saved search object or return a 404 error if not found
    saved_search.delete()  # Delete the saved search
    return redirect(
        'saved_searches'
    )  # Render the saved searches page


def job_detail(request, pk):
    """
    Displays the details of a specific job.
    """
    job = get_object_or_404(
        Job, pk=pk
    )  # Get the job object or return a 404 error if not found
    job.views += 1  # Increment the view count for the job
    job.save()  # Save the job object
    if request.user.is_authenticated:
        UserActivity.objects.create(
            user=request.user, activity_type='job_view', details={'job_id': job.pk, 'job_title': job.title}
        )
    return render(
        request, 'jobs/job_detail.html', {'job': job}
    )  # Render the job detail template

================
File: mysite/.env
================
SECRET_KEY=".jADQviP@WTJ_WAnVHZakoh6cCq6Z3Q*!WretXxk7wMpvAFm-6"

================
File: mysite/asgi.py
================
"""
ASGI config for mysite project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')

application = get_asgi_application()

================
File: mysite/settings.py
================
"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from load_dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django_ratelimit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "accounts",
    "two_factor",
    "django_otp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_totp",
    "jobs",
    "employers",
    "applications",
    "search",
    "rest_framework",
    "rest_framework.authtoken",
    "django_redis",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Required
    "django_otp.middleware.OTPMiddleware",  # Required
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_ratelimit.middleware.RatelimitMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Add this line
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "instance/db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "core": {
            "handlers": ["console"],
            "level": "INFO",
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

STATIC_URL = "static/"
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

RATELIMIT_USE_XFORWARDEDFOR = True

RATELIMIT_DEFAULT_RATE = "60/m"

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/accounts/login/"

================
File: mysite/urls.py
================
"""
URL configuration for mysite project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
import mysite.views as mysite_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('accounts.urls')),
    path('employers/', include('employers.urls')),
    path('jobs/', include('jobs.urls')),
    path('applications/', include('applications.urls')),
    path('search/', include('search.urls')),
    path('two_factor/', include('two_factor_urls', namespace='two_factor')),
    path('api-auth/', include('rest_framework.urls')),
    path('', mysite_views.home, name='home'),
]

================
File: mysite/views.py
================
from django.shortcuts import render


from core.utils import log_info


def home(request):
    log_info("Home page visited")
    return render(request, "home.html")

================
File: mysite/wsgi.py
================
"""
WSGI config for mysite project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')

application = get_wsgi_application()

================
File: search/migrations/0001_initial.py
================
# Generated by Django 4.2 on 2025-02-11 09:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(blank=True, max_length=255)),
                ('industry', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_saved_searches', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: search/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: search/apps.py
================
from django.apps import AppConfig


class SearchConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'search'  # Configuration for the search app

================
File: search/forms.py
================
from django import forms

from django import forms
from .models import SavedSearch

class SearchForm(forms.Form):
    query = forms.CharField(label='Search', required=False)
    industry = forms.CharField(label='Industry', required=False)

class SearchForm(forms.Form):
    """
    Form for searching jobs.
    """
    query = forms.CharField(
        label='Search', required=False
    )  # Field for the search query (optional)
    industry = forms.CharField(
        label='Industry', required=False
    )  # Field for the industry (optional)


class SavedSearchForm(forms.ModelForm):
    """
    Form for saving search queries.
    """
    class Meta:
        model = SavedSearch  # Associate with the SavedSearch model
        fields = ['query', 'industry']  # Specify the fields to include

================
File: search/models.py
================
from django.db import models  # Import the models module
from django.contrib.auth import get_user_model  # Import the get_user_model function

User = get_user_model()  # Get the User model

class SavedSearch(models.Model):
    """
    Model representing a saved search query.
    """
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='search_saved_searches',
        help_text="Foreign key to the User model"
    )  # Foreign key to the User model
    query = models.CharField(
        max_length=255,
        blank=True,
        help_text="Search query (optional)"
    )  # The saved search query
    industry = models.CharField(
        max_length=255,
        blank=True,
        help_text="Industry for the search (optional)"
    )  # The saved search industry
    created_at = models.DateTimeField(
        auto_now_add=True,
        help_text="Date and time when the search was saved"
    )  # The date and time the search was saved

    def __str__(self):
        """
        Returns a string representation of the saved search.
        """
        return f"Saved Search: {self.query} - {self.industry}"

================
File: search/tests.py
================
from django.test import TestCase
from django.contrib.auth import get_user_model
from jobs.models import Job
from .models import SavedSearch
from .forms import SearchForm
from employers.models import Employer

User = get_user_model()

class SearchTests(TestCase):
    """
    Tests for the search functionality.
    """
    def setUp(self):
        """
        Set up data for the tests.
        """
        self.username = 'testuser'  # Define a test username
        self.password = 'testpassword'  # Define a test password
        self.email = 'test@example.com'  # Define a test email
        self.user = User.objects.create_user(
            username=self.username, password=self.password, email=self.email, user_type='employer'
        )  # Create an employer user
        self.employer = Employer.objects.create(
            user=self.user, company_name='Test Company'
        )  # Create an employer profile

        self.job1 = Job.objects.create(
            employer=self.employer, title='Test Job 1', description='Test Description', location='Test Location', salary='$100,000', industry='Technology'
        )  # Create a job listing
        self.job2 = Job.objects.create(
            employer=self.employer, title='Test Job 2', description='Test Description', location='Test Location', salary='$100,000', industry='Healthcare'
        )  # Create another job listing

    def test_search_functionality(self):
        """
        Test that the search functionality returns the correct results.
        """
        response = self.client.get(
            '/search/', {'query': 'Test Job', 'industry': 'Technology'}
        )  # Perform a search
        self.assertEqual(response.status_code, 200)  # Assert that the response status code is 200 OK
        self.assertEqual(len(response.context['jobs']), 1)  # Assert that one job is returned
        self.assertEqual(response.context['jobs'][0].title, 'Test Job 1')  # Assert that the correct job is returned

    def test_saved_search_creation(self):
        """
        Test that a saved search can be created successfully.
        """
        self.client.login(username=self.username, password=self.password)  # Log in as the user
        response = self.client.post(
            '/search/save_search/', {'query': 'Test Job', 'industry': 'Technology'}
        )  # Save the search
        self.assertEqual(response.status_code, 302)  # Assert that the response status code is 302 (redirect)
        self.assertEqual(SavedSearch.objects.count(), 1)  # Assert that a saved search was created

    def test_saved_search_deletion(self):
        """
        Test that a saved search can be deleted successfully.
        """
        self.client.login(username=self.username, password=self.password)  # Log in as the user
        saved_search = SavedSearch.objects.create(
            user=self.user, query='Test Query', industry='Test Industry'
        )  # Create a new saved search
        response = self.client.get(
            f'/search/delete_saved_search/{saved_search.pk}/'
        )  # Delete the saved search
        self.assertEqual(response.status_code, 302)  # Assert that the response status code is 302 (redirect)
        self.assertEqual(SavedSearch.objects.count(), 0)  # Assert that the saved search was deleted

================
File: search/urls.py
================
from django.urls import path
from . import views

urlpatterns = [
    path('', views.search, name='search'),
    path('save_search/', views.save_search, name='save_search'),
    path('saved_searches/', views.saved_searches, name='saved_searches'),
    path('delete_saved_search/<int:pk>/', views.delete_saved_search, name='delete_saved_search'),
]

================
File: search/views.py
================
from django.shortcuts import render, redirect, get_object_or_404  # Import necessary modules
from django.contrib.auth.decorators import login_required  # Import the login_required decorator
from jobs.models import Job  # Import the Job model
from .forms import SearchForm, SavedSearchForm  # Import the SearchForm and SavedSearchForm
from .models import SavedSearch  # Import the SavedSearch model

@login_required  # Require the user to be logged in
def save_search(request):
    """
    Saves a search query for a user.
    """
    if request.method == 'POST':  # Check if the request method is POST
        form = SavedSearchForm(
            request.POST
        )  # Create a SavedSearchForm instance with the POST data
        if form.is_valid():  # Check if the form is valid
            saved_search = form.save(
                commit=False
            )  # Save the form data to create a new saved search
            saved_search.user = request.user  # Set the user for the saved search
            saved_search.save()  # Save the saved search
            return redirect(
                'saved_searches'
            )  # Redirect to the saved searches page
    else:
        form = SavedSearchForm()  # Create an empty SavedSearchForm instance
    return render(
        request, 'search/save_search.html', {'form': form}
    )  # Render the save search template


@login_required  # Require the user to be logged in
def saved_searches(request):
    """
    Lists all saved searches for a user.
    """
    saved_searches = SavedSearch.objects.filter(
        user=request.user
    )  # Get all saved searches for the current user
    return render(
        request, 'search/saved_searches.html', {'saved_searches': saved_searches}
    )  # Render the saved searches template


@login_required  # Require the user to be logged in
def delete_saved_search(request, pk):
    """
    Deletes a saved search.
    """
    saved_search = get_object_or_404(
        SavedSearch, pk=pk, user=request.user
    )  # Get the saved search object or return a 404 error if not found
    saved_search.delete()  # Delete the saved search
    return redirect(
        'saved_searches'
    )  # Redirect to the saved searches page


def search(request):
    """
    View to display search results.
    """
    form = SearchForm(request.GET)  # Create a SearchForm instance with the GET data
    jobs = Job.objects.all()  # Get all job objects

    if form.is_valid():  # Check if the form is valid
        query = form.cleaned_data.get('query')  # Get the search query from the form
        industry = form.cleaned_data.get('industry')  # Get the industry from the form

        if query:  # Check if a query is provided
            jobs = jobs.filter(
                title__icontains=query
            )  # Filter jobs by title if a query is provided

        if industry:  # Check if an industry is provided
            jobs = jobs.filter(
                industry__icontains=industry
            )  # Filter jobs by industry if an industry is provided

    return render(
        request, 'search/search.html', {'form': form, 'jobs': jobs}
    )  # Render the search template with the form and job results

================
File: src/core/utils/errors.ts
================
export class CustomError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "CustomError";
  }
}

export function handleError(error: Error) {
  console.error(error);
  // Implement error logging and reporting here
}

================
File: src/generated/.openapi-generator/FILES
================
.gitignore
.npmignore
api.ts
base.ts
common.ts
configuration.ts
git_push.sh
index.ts

================
File: src/generated/.openapi-generator/VERSION
================
7.12.0

================
File: src/generated/.gitignore
================
wwwroot/*.js
node_modules
typings
dist

================
File: src/generated/.npmignore
================
# empty npmignore to ensure all required files (e.g., in the dist folder) are published by npm

================
File: src/generated/.openapi-generator-ignore
================
# OpenAPI Generator Ignore
# Generated by openapi-generator https://github.com/openapitools/openapi-generator

# Use this file to prevent files from being overwritten by the generator.
# The patterns follow closely to .gitignore or .dockerignore.

# As an example, the C# client generator defines ApiClient.cs.
# You can make changes and tell OpenAPI Generator to ignore just this file by uncommenting the following line:
#ApiClient.cs

# You can match any string of characters against a directory, file or extension with a single asterisk (*):
#foo/*/qux
# The above matches foo/bar/qux and foo/baz/qux, but not foo/bar/baz/qux

# You can recursively match patterns against a directory, file or extension with a double asterisk (**):
#foo/**/qux
# This matches foo/bar/qux, foo/baz/qux, and foo/bar/baz/qux

# You can also negate patterns with an exclamation (!).
# For example, you can ignore all files in a docs folder with the file extension .md:
#docs/*.md
# Then explicitly reverse the ignore rule for a single file:
#!docs/README.md

================
File: src/generated/api.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * V1PromoJobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountsApiTokenAuthPost200Response
 */
export interface AccountsApiTokenAuthPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTokenAuthPost200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface AccountsApiTokenAuthPostRequest
 */
export interface AccountsApiTokenAuthPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTokenAuthPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTokenAuthPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'employer': number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'salary': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'industry': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'created_at': string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'views': number;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'applications': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Obtain authentication token
         * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenAuthPost: async (accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountsApiTokenAuthPostRequest' is not null or undefined
            assertParamExists('accountsApiTokenAuthPost', 'accountsApiTokenAuthPostRequest', accountsApiTokenAuthPostRequest)
            const localVarPath = `/accounts/api-token-auth/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountsApiTokenAuthPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific job
         * @param {number} pk Primary key of the job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPkGet: async (pk: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            assertParamExists('apiJobsPkGet', 'pk', pk)
            const localVarPath = `/api/jobs/{pk}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Obtain authentication token
         * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiTokenAuthPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accountsApiTokenAuthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiJobsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific job
         * @param {number} pk Primary key of the job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsPkGet(pk: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsPkGet(pk, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiJobsPkGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Obtain authentication token
         * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountsApiTokenAuthPost200Response> {
            return localVarFp.accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Job>> {
            return localVarFp.apiJobsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific job
         * @param {number} pk Primary key of the job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPkGet(pk: number, options?: RawAxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.apiJobsPkGet(pk, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Obtain authentication token
     * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific job
     * @param {number} pk Primary key of the job to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobsPkGet(pk: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobsPkGet(pk, options).then((request) => request(this.axios, this.basePath));
    }
}

================
File: src/generated/base.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * V1PromoJobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

export const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: RawAxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath ?? basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(public field: string, msg?: string) {
        super(msg);
        this.name = "RequiredError"
    }
}

interface ServerMap {
    [key: string]: {
        url: string,
        description: string,
    }[];
}

/**
 *
 * @export
 */
export const operationServerMap: ServerMap = {
}

================
File: src/generated/common.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * V1PromoJobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}

================
File: src/generated/configuration.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * V1PromoJobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.serverIndex = param.serverIndex;
        this.baseOptions = {
            ...param.baseOptions,
            headers: {
                ...param.baseOptions?.headers,
            },
        };
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}

================
File: src/generated/git_push.sh
================
#!/bin/sh
# ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
#
# Usage example: /bin/sh ./git_push.sh wing328 openapi-petstore-perl "minor update" "gitlab.com"

git_user_id=$1
git_repo_id=$2
release_note=$3
git_host=$4

if [ "$git_host" = "" ]; then
    git_host="github.com"
    echo "[INFO] No command line input provided. Set \$git_host to $git_host"
fi

if [ "$git_user_id" = "" ]; then
    git_user_id="GIT_USER_ID"
    echo "[INFO] No command line input provided. Set \$git_user_id to $git_user_id"
fi

if [ "$git_repo_id" = "" ]; then
    git_repo_id="GIT_REPO_ID"
    echo "[INFO] No command line input provided. Set \$git_repo_id to $git_repo_id"
fi

if [ "$release_note" = "" ]; then
    release_note="Minor update"
    echo "[INFO] No command line input provided. Set \$release_note to $release_note"
fi

# Initialize the local directory as a Git repository
git init

# Adds the files in the local repository and stages them for commit.
git add .

# Commits the tracked changes and prepares them to be pushed to a remote repository.
git commit -m "$release_note"

# Sets the new remote
git_remote=$(git remote)
if [ "$git_remote" = "" ]; then # git remote not defined

    if [ "$GIT_TOKEN" = "" ]; then
        echo "[INFO] \$GIT_TOKEN (environment variable) is not set. Using the git credential in your environment."
        git remote add origin https://${git_host}/${git_user_id}/${git_repo_id}.git
    else
        git remote add origin https://${git_user_id}:"${GIT_TOKEN}"@${git_host}/${git_user_id}/${git_repo_id}.git
    fi

fi

git pull origin master

# Pushes (Forces) the changes in the local repository up to the remote repository
echo "Git pushing to https://${git_host}/${git_user_id}/${git_repo_id}.git"
git push origin master 2>&1 | grep -v 'To https'

================
File: src/generated/index.ts
================
/* tslint:disable */
/* eslint-disable */
/**
 * V1PromoJobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export * from "./api";
export * from "./configuration";

================
File: static/components/HelloWorld.js
================
import React from 'react';

function HelloWorld() {
  return (
    <h1>Hello, world!</h1>
  );
}

export default HelloWorld;

================
File: static/css/style.css
================
body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
    color: #495057;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 30px;
}

h1, h2, h3 {
    color: #007bff;
    margin-bottom: 1.5rem;
}

a {
    color: #007bff;
    text-decoration: none;
    transition: color 0.3s ease;
}

a:hover {
    color: #0056b3;
    text-decoration: underline;
}

.navbar {
    background-color: #007bff !important;
    padding: 1rem 0;
}

.navbar-brand {
    font-size: 1.75rem;
    font-weight: 500;
}

.navbar-nav .nav-link {
    color: rgba(255, 255, 255, 0.8);
    padding: 0.75rem 1rem;
}

.navbar-nav .nav-link:hover {
    color: #fff;
}

/* Forms */
form {
    margin-top: 30px;
}

label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

input[type="text"],
input[type="email"],
input[type="password"],
textarea {
    width: 100%;
    padding: 12px 15px;
    margin-bottom: 20px;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    box-sizing: border-box;
    font-size: 1rem;
}

button.btn {
    background-color: #28a745;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button.btn:hover {
    background-color: #218838;
}

/* Utilities */
.mt-4 {
    margin-top: 2rem !important;
}

/* General Styles */
body {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
    color: #495057;
    line-height: 1.6;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 30px;
}

h1, h2, h3 {
    color: #343a40;
    margin-bottom: 1.5rem;
    font-weight: 700;
}

a {
    color: #007bff;
    text-decoration: none;
    transition: color 0.3s ease;
}

a:hover {
    color: #0056b3;
    text-decoration: underline;
}

/* Navbar Styles */
.navbar {
    background-color: #007bff !important;
    padding: 1rem 0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar-brand {
    font-size: 1.75rem;
    font-weight: 700;
    color: #fff !important;
}

.navbar-nav .nav-link {
    color: rgba(255, 255, 255, 0.8);
    padding: 0.75rem 1rem;
    transition: color 0.3s ease;
}

.navbar-nav .nav-link:hover {
    color: #fff;
}

.navbar-nav .active > .nav-link {
    color: #fff;
    font-weight: 600;
}

/* Form Styles */
form {
    margin-top: 30px;
}

label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

input[type="text"],
input[type="email"],
input[type="password"],
textarea {
    width: 100%;
    padding: 12px 15px;
    margin-bottom: 20px;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    box-sizing: border-box;
    font-size: 1rem;
}

button.btn {
    background-color: #28a745;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button.btn:hover {
    background-color: #218838;
}

/* Utilities */
.mt-4 {
    margin-top: 2rem !important;
}

.ml-auto {
    margin-left: auto !important;
}

/* Media Queries for Responsiveness */
@media (max-width: 992px) {
    .navbar-collapse {
        text-align: center;
    }

    .navbar-nav {
        margin-top: 1rem;
    }

    .navbar-nav .nav-link {
        padding: 0.5rem 1rem;
    }
}

@media (max-width: 768px) {
    .container {
        padding: 20px;
    }
}

================
File: templates/accounts/edit_employer_profile.html
================
{% extends 'base.html' %}

{% block content %}
  <h1>Edit Employer Profile</h1>
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save</button>
  </form>
{% endblock %}

================
File: templates/accounts/edit_jobseeker_profile.html
================
{% extends 'base.html' %}

{% block content %}
  <h2>Edit Job Seeker Profile</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Update Profile</button>
  </form>
{% endblock %}

================
File: templates/accounts/login.html
================
{% extends 'base.html' %}

{% block content %}
  <h1>Login</h1>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
  </form>
  {% if error %}
    <p style="color: red;">{{ error }}</p>
  {% endif %}
{% endblock %}

================
File: templates/accounts/password_reset_complete.html
================
{% extends 'base.html' %}

{% block content %}
  <h1>Password reset complete</h1>
  <p>Your password has been set. You may go ahead and log in now.</p>
  <a href="{% url 'login' %}">Log in</a>
{% endblock %}

================
File: templates/accounts/password_reset_confirm.html
================
{% extends 'base.html' %}

{% block content %}
  <h1>Set New Password</h1>
  {% if validlink %}
    <p>Please enter your new password twice so we can verify you typed it in correctly.</p>
    <form method="post">
      {% csrf_token %}
      {{ form.as_p }}
      <button type="submit">Set New Password</button>
    </form>
  {% else %}
    <p>The password reset link was invalid, possibly because it has already been used.  Please request a new password reset.</p>
  {% endif %}
{% endblock %}

================
File: templates/accounts/password_reset_done.html
================
{% extends 'base.html' %}

{% block content %}
  <h1>Password Reset Email Sent</h1>
  <p>We've emailed you instructions for setting your password, if an account with the email you submitted exists. You should receive them shortly.</p>
  <p>If you don't receive an email, please make sure you've entered the address you registered with, and check your spam folder.</p>
{% endblock %}

================
File: templates/accounts/password_reset_email.html
================
{% load i18n %}

{% block subject %}
{% trans "Password reset requested" %}
{% endblock subject %}

{% block text_body %}
{% trans "You're receiving this email because you requested a password reset for your user account at {{ site_name }}." %}

{% trans "Please go to the following page and choose a new password:" %}
{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}

{% trans "Thanks for using our site!" %}

{% blocktrans %}The {{ site_name }} team{% endblocktrans %}

{% endblock text_body %}

{% block html_body %}
<p>{% trans "You're receiving this email because you requested a password reset for your user account at {{ site_name }}." %}</p>

<p>{% trans "Please go to the following page and choose a new password:" %}
<a href="{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}">{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}</a></p>

<p>{% trans "Thanks for using our site!" %}</p>

<p>{% blocktrans %}The {{ site_name }} team{% endblocktrans %}</p>
{% endblock html_body %}

================
File: templates/accounts/password_reset.html
================
{% extends 'base.html' %}

{% block content %}
  <h1>Password Reset</h1>
  <p>Enter your email address to reset your password.</p>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Reset Password</button>
  </form>
{% endblock %}

================
File: templates/accounts/profile_success.html
================
{% extends 'base.html' %}

{% block content %}
  <h2>Profile Updated Successfully!</h2>
  <p>Your profile has been updated successfully.</p>
{% endblock %}

================
File: templates/accounts/register.html
================
{% extends 'base.html' %}

{% block content %}
  <h2>Register</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit" class="btn btn-primary">Register</button>
  </form>
{% endblock %}

================
File: templates/applications/application_detail.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Application Detail</h2>
  <p>Job: {{ application.job.title }}</p>
  <p>Job Seeker: {{ application.job_seeker.user.username }}</p>
  <p>Application Date: {{ application.application_date }}</p>
  <p>Status: {{ application.status }}</p>
  <a href="{% url 'update_application_status' pk=application.pk %}">Update Status</a>
{% endblock %}

================
File: templates/applications/application_failure.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Application Failed</h2>
  <p>You must be logged in as a job seeker to apply for jobs.</p>
{% endblock %}

================
File: templates/applications/application_success.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Application Successful</h2>
  <p>Your application has been submitted successfully.</p>
{% endblock %}

================
File: templates/applications/employer_applications.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Applications for {{ job.title }}</h2>
  <ul>
    {% for application in applications %}
      <li>
        <a href="{% url 'application_detail' pk=application.pk %}">Application by {{ application.job_seeker.user.username }}</a>
      </li>
    {% endfor %}
  </ul>
{% endblock %}

================
File: templates/applications/update_application_status.html
================
{% extends "base.html" %}

{% extends "base.html" %}

{% block content %}
  <h2>Update Application Status</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit" class="btn btn-primary">Update</button>
  </form>
{% endblock %}

================
File: templates/employers/employer_profile_create.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Create Employer Profile</h2>
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create</button>
  </form>
{% endblock %}

================
File: templates/employers/employer_profile_detail.html
================
{% extends "base.html" %}

{% block content %}
  <h2>{{ employer.company_name }}</h2>
  <p>{{ employer.company_description }}</p>
  <p><a href="{{ employer.website }}">{{ employer.website }}</a></p>
  {% if employer.logo %}
    <img src="{{ employer.logo.url }}" alt="{{ employer.company_name }}">
  {% endif %}
{% endblock %}

================
File: templates/employers/employer_profile_edit.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Edit Employer Profile</h2>
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Update</button>
  </form>
{% endblock %}

================
File: templates/jobs/job_create.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Create Job Listing</h2>
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create</button>
  </form>
{% endblock %}

================
File: templates/jobs/job_detail.html
================
{% extends "base.html" %}

{% block content %}
  <h2>{{ job.title }}</h2>
  <p>Location: {{ job.location }}</p>
  <p>Salary: {{ job.salary }}</p>
  <p>Description: {{ job.description }}</p>
  {% if job.image %}
    <img src="{{ job.image.url }}" alt="{{ job.title }}">
  {% endif %}
  <p>Views: {{ job.views }}</p>
  <p>Applications: {{ job.applications }}</p>
  <a href="{% url 'job_edit' pk=job.pk %}">Edit Job Listing</a>
{% endblock %}

================
File: templates/jobs/job_edit.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Edit Job Listing</h2>
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Update</button>
  </form>
{% endblock %}

================
File: templates/jobs/job_list.html
================
{% extends "base.html" %}

{% block content %}
{% load static %}

{% block content %}
  <h2>Job Listings</h2>

  <form method="get">
    <input type="text" name="q" placeholder="Search by title">
    <select name="industry">
      <option value="">All Industries</option>
      <option value="technology">Technology</option>
      <option value="healthcare">Healthcare</option>
      <option value="finance">Finance</option>
    </select>
    <button type="submit">Search</button>
  </form>

  <ul>
    {% for job in jobs %}
      <li><a href="{% url 'job_detail' pk=job.pk %}">{{ job.title }}</a></li>
    {% endfor %}
  </ul>
  <a href="{% url 'job_create' %}">Create New Job Listing</a>
{% endblock %}

================
File: templates/jobs/save_search.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Save Search</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save Search</button>
  </form>
{% endblock %}

================
File: templates/jobs/saved_searches.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Saved Searches</h2>
  <ul>
    {% for saved_search in saved_searches %}
      <li>
        {{ saved_search.query }} - {{ saved_search.industry }}
        <a href="{% url 'delete_saved_search' pk=saved_search.pk %}">Delete</a>
      </li>
    {% endfor %}
  </ul>
  <a href="{% url 'save_search' %}">Save New Search</a>
{% endblock %}

================
File: templates/search/save_search.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Save Search</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Save Search</button>
  </form>
{% endblock %}

================
File: templates/search/saved_searches.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Saved Searches</h2>
  <ul>
    {% for search in saved_searches %}
      <li>{{ search.query }} - {{ search.industry }} <a href="{% url 'delete_saved_search' pk=search.pk %}">Delete</a></li>
    {% endfor %}
  </ul>
  <a href="{% url 'search' %}">New Search</a> | <a href="{% url 'save_search' %}">Save Current Search</a>
{% endblock %}

================
File: templates/search/search.html
================
{% extends "base.html" %}

{% block content %}
  <h2>Search Jobs</h2>
  <form method="get">
    {{ form.as_p }}
    <button type="submit">Search</button>
  </form>

  <h3>Search Results</h3>
  <ul>
    {% for job in jobs %}
      <li><a href="{% url 'job_detail' pk=job.pk %}">{{ job.title }}</a> - {{ job.industry }}</li>
    {% endfor %}
  </ul>
{% endblock %}

================
File: templates/two_factor/_base.html
================
{% extends "base.html" %}

{% block content %}
  {% block two_factor_content %}{% endblock %}
{% endblock %}

================
File: templates/base.html
================
<!DOCTYPE html>
<html>
<head>
  <title>V1PromoJobs</title>
  {% load static %}
  <link rel="stylesheet" href="{% static 'css/style.css' %}">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">V1PromoJobs</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ml-auto">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link {% if request.path == '/accounts/register/' %}active{% endif %}" href="/accounts/register/">Register</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/accounts/login/">Login</a>
          </li>
        </ul>
        <ul class="navbar-nav ml-auto">
          {% if user.is_authenticated %}
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              👤 {{ user.username }}
            </a>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
              <li><a class="dropdown-item" href="{% url 'edit_employer_profile' %}">Edit Profile</a></li>
              <li><a class="dropdown-item" href="{% url 'logout' %}">Logout</a></li>
            </ul>
          </li>
          {% endif %}
        </ul>
      </div>
    </div>
  </nav>
  <div class="container">
    {% csrf_token %}
    {% block content %}
    {% endblock %}
  </div>
  <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
  <script src="{% static 'components/HelloWorld.js' %}"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: templates/home.html
================
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h1>Welcome to V1PromoJobs!</h1>
    {% if user.is_authenticated %}
        <p>Welcome, {{ user.username }}!</p>
        <a href="{% url 'logout' %}">Logout</a>
    {% else %}
        <a href="{% url 'register' %}">Register</a>
        <a href="{% url 'login' %}">Login</a>
    {% endif %}
    <div id="root"></div>
    <script type="text/javascript">
      ReactDOM.render(
        React.createElement(HelloWorld),
        document.getElementById('root')
      );
    </script>
</div>
{% endblock %}

================
File: activeContext.md
================
## Active Context

**What I'm currently working on:** Created a task list to build the project.

**Recent changes:**
- Django 4.2 installed
- .venv created
- .env with SECRET_KEY created
- Database configured
- Project structure created
- Accounts app created
- Implemented User model with dual user types (Employer/Job Seeker) as per `systemPatterns.md`.
- Implemented profile management features.
- Implemented session-based authentication.
- Implemented role-based access control.
- Implemented registration, login, logout views.

**Next steps:**
- Implement two-factor authentication support.
- Created login buttons and routes for the home page.
- CSRF tokens are enabled.
- Configured Django project to use django-two-factor-auth package.
- Ran migrations.
- Added link to manage two-factor authentication in the user's profile page.
- Started the development server.
- Installed the `phonenumbers` package.
- Implemented application tracking by adding a `status` field to the `Application` model.
- Registered the `Application` model in the admin panel.
- Created an `ApplicationForm` to allow employers to update the application status.
- Updated the `update_application_status.html` template to display the form.
- Ran migrations to update the database schema.
- Implemented user engagement analytics by tracking job views, applications submitted, and employer profile views.
- Implemented RESTful API using Django REST Framework for the Job model.
- Added API endpoints for listing and retrieving jobs.
- Added token-based authentication to the API endpoints.
- Added REST framework URLs to mysite/urls.py.
- Implemented rate limiting for the API endpoints.
- Generated API clients using OpenAPI Generator with TypeScript axios template and placed generated code in `/src/generated`.
- Verified that all necessary packages are installed and added to `requirements.txt`.

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: openapi.yaml
================
openapi: 3.0.0
info:
  title: V1PromoJobs API
  version: 1.0.0
paths:
  /accounts/api-token-auth/:
    post:
      summary: Obtain authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid request
        '401':
          description: Invalid credentials
  /api/jobs/:
    get:
      summary: List all jobs
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '401':
          description: Unauthorized
  /api/jobs/{pk}/:
    get:
      summary: Retrieve a specific job
      parameters:
        - name: pk
          in: path
          required: true
          description: Primary key of the job to retrieve
          schema:
            type: integer
      security:
        - TokenAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          description: Unauthorized
        '404':
          description: Not found
components:
  schemas:
    Job:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        employer:
          type: integer
        location:
          type: string
        salary:
          type: string
        industry:
          type: string
        created_at:
          type: string
          format: date-time
        views:
          type: integer
        applications:
          type: integer
      required:
        - id
        - title
        - description
        - employer
        - location
        - salary
        - industry
        - created_at
        - views
        - applications
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

================
File: productContext.md
================
# Product Context

## Project Purpose
This project aims to create a specialized job board platform specifically designed for the promotional products industry. The platform serves as a bridge between employers and job seekers within this niche market, addressing the unique hiring needs and job requirements of the promotional products sector.

## Problem Statement
The promotional products industry lacks a dedicated job platform that understands its specific requirements and terminology. Current general job boards don't effectively serve the unique needs of this industry, leading to:
- Difficulty in finding qualified candidates with industry-specific experience
- Inefficient job posting and searching processes
- Lack of industry-specific filtering and categorization
- Limited ability to showcase industry-relevant skills and experience

## Solution Overview
The platform provides a comprehensive job board solution that includes:
- Industry-specific job listings and search capabilities
- Specialized profile systems for both employers and job seekers
- Custom categorization and filtering tailored to promotional products roles
- Built-in resume builder with industry-relevant templates
- Company branding and profile customization options
- Advanced analytics and reporting for employers

## Core User Personas

### Employers
- Promotional products companies
- Industry suppliers
- Marketing agencies with promo divisions
- Sales organizations in the promotional space

### Job Seekers
- Sales professionals
- Design specialists
- Account managers
- Production coordinators
- Industry-specific roles

## Key Features
1. Job Management System
   - Post, edit, and manage job listings
   - Rich text editing capabilities
   - Media upload support

2. User Management
   - Dual user types (employers/job seekers)
   - Profile management
   - Resume builder and storage

3. Search and Discovery
   - Advanced search functionality
   - Industry-specific filters
   - Saved searches and alerts

4. Analytics and Reporting
   - Job posting performance metrics
   - Application tracking
   - User engagement analytics

## Success Metrics
- Number of active job listings
- User registration and engagement rates
- Job application submission rates
- Employer-to-candidate match rates
- Platform usage analytics
- User satisfaction ratings

================
File: progress.md
================
## Progress

**What works:**
- Django 4.2 installation
- .venv creation
- .env with SECRET_KEY creation
- Database configured
- Project structure created
- Accounts app created
- Implemented User model with dual user types (Employer/Job Seeker) as per `systemPatterns.md`.
- Implemented profile management features.
- Implemented session-based authentication.
- Implemented role-based access control.
- Implemented registration, login, logout views.
- Implemented password reset functionality.
- Created password reset templates.
- Added login/logout buttons and routes to the home page.
- Configured Django project to use django-two-factor-auth package.
- Ran migrations.
- Added link to manage two-factor authentication in the user's profile page.
- Started the development server.
- Installed the `phonenumbers` package.
- Configured two-factor authentication URLs.
- Created `/docs` directory and `adr` subdirectory with `template.md` file.
- Updated `README.md` file.
- Created `/src/utils/errors.ts` file.
- Implemented two-factor authentication support using `django-two-factor-auth` package.
- Created `templates/two_factor/_base.html` template.
- Wrote unit tests for user management logic.
- Created `jobs` app.
- Implemented Job model in `jobs/models.py`.
- Implemented views for creating, editing, and managing job listings.
- Created migrations for the `jobs` app.
- Implemented search and discovery features with industry-specific filters.
- Implemented saved searches and alerts.
- Wrote unit tests for job management logic.
- Employers app created
- Employer model implemented
- Employer profile views implemented
- Unit tests for employer management logic written
- Applications app created
- Application model implemented
- Job application views implemented
- Employer application review views implemented
- Unit tests for application management logic written
- Search app created
- Advanced search functionality implemented
- Saved searches and alerts implemented
- Unit tests for searches and alerts logic written
- Core app created
- Implemented core functionalities and utilities.
- Implemented error handling and logging.
- Configured logging settings in `mysite/settings.py`.
- Added a log message to the `home` view in `mysite/views.py`.
- Added a container to the `home.html` template.
- Created `static/css/style.css` file.
- Linked the CSS file to the `base.html` template.
- Added REST framework to the `INSTALLED_APPS` in `mysite/settings.py`.
- Added REST framework settings to the `mysite/settings.py` file.
- Added `rest_framework.authtoken` to the `INSTALLED_APPS` in `mysite/settings.py`.
- Ran migrations to create the `authtoken` table.
- Created a view in the `accounts` app that allows users to obtain a token.
- Added a URL for the `obtain_auth_token` view in `accounts/urls.py`.
- Installed `django-ratelimit` package.
- Added `ratelimit` to the `INSTALLED_APPS` in `mysite/settings.py`.
- Added `RatelimitMiddleware` to the `MIDDLEWARE` in `mysite/settings.py`.
- Configured rate limits in `mysite/settings.py`.
- Configured Django to use Redis for caching.
- Created an OpenAPI specification for the API.
- Installed the OpenAPI Generator.
- Generated API clients using OpenAPI Generator with TypeScript axios template and placed generated code in `/src/generated`.
- Implemented CSRF protection by adding the `{% csrf_token %}` template tag to the `base.html` template.
- Resolved EmployerProfile import error in accounts app
- Added edit_jobseeker_profile view and template
- Added profile_success view and template
- Fixed registration error
- Integrated React for interactive components
- Added more styling to the base template
- Moved profile to the right side of the nav bar
- Provided best practices for preventing SQL injection
- Provided best practices for preventing XSS
- Implemented rate limiting
- Implemented job posting performance metrics

**What's left to build:**
- Implement application tracking.
- Implement user engagement analytics.
- Implement HTTPS
- The rest of the project, as defined in tasklist.md

**Progress status:**
- Task list created
- Documentation initialized
- Two-factor authentication implemented
- Two-factor authentication templates styled
- Unit tests for user management logic written
- Jobs app created
- Job model implemented
- Job listing views implemented
- Jobs app migrations created and applied
- Search and discovery features implemented
- Saved searches and alerts implemented
- Unit tests for search management logic written
- Employers app created
- Employer model implemented
- Employer profile views implemented
- Unit tests for employer management logic written
- Applications app created
- Application model implemented
- Job application views implemented
- Employer application review views implemented
- Unit tests for application management logic written
- Search app created
- Advanced search functionality implemented
- Saved searches and alerts implemented
- Unit tests for searches and alerts logic written
- Core app created
- Implemented core functionalities and utilities.
- Implemented error handling and logging.
- Configured logging settings in `mysite/settings.py`.
- Added a log message to the `home` view in `mysite/views.py`.
- Added a container to the `home.html` template.
- Created `static/css/style.css` file.
- Linked the CSS file to the `base.html` template.
- Added REST framework to the `INSTALLED_APPS` in `mysite/settings.py`.
- Added REST framework settings to the `mysite/settings.py` file.
- Added `rest_framework.authtoken` to the `INSTALLED_APPS` in `mysite/settings.py`.
- Ran migrations to create the `authtoken` table.
- Created a view in the `accounts` app that allows users to obtain a token.
- Added a URL for the `obtain_auth_token` view in `accounts/urls.py`.
- Installed `django-ratelimit` package.
- Added `ratelimit` to the `INSTALLED_APPS` in `mysite/settings.py`.
- Added `RatelimitMiddleware` to the `MIDDLEWARE` in `mysite/settings.py`.
- Configured rate limits in `mysite/settings.py`.
- Configured Django to use Redis for caching.
- Created an OpenAPI specification for the API.
- Installed the OpenAPI Generator.
- Generated API clients using OpenAPI Generator with TypeScript axios template and placed generated code in `/src/generated`.
- Implemented CSRF protection by adding the `{% csrf_token %}` template tag to the `base.html` template.
- Resolved EmployerProfile import error in accounts app
- Added edit_jobseeker_profile view and template
- Added profile_success view and template
- Fixed registration error
- Integrated React for interactive components
- Added more styling to the base template
- Moved profile to the right side of the nav bar
- Implemented rate limiting
- Implemented job posting performance metrics

================
File: project_overview.md
================
Promo job board Building a job website tailored for the promotional products industry requires attention to specific industry needs while incorporating the best features from top job sites like Indeed, LinkedIn, Glassdoor, ZipRecruiter, and CareerBuilder. Below is a detailed breakdown of what to include, from pages to database fields and functionalities.

Essential Pages to Include
	1.	Home Page
	•	Highlight site features.
	•	Showcase featured jobs and top employers.
	•	Include quick search functionality.
	2.	Job Listings Page
	•	Search and filter jobs by industry-specific roles, location, company, job type (full-time, part-time, freelance), salary range, and experience level.
	3.	Job Details Page
	•	Detailed information about a job, including responsibilities, qualifications, benefits, and company culture.
	4.	Employer Page
	•	Profiles for companies, including information about their brand, job postings, and employee reviews (optional).
	5.	Job Seeker Dashboard
	•	Saved jobs, job applications, notifications, and recommended jobs.
	•	Resume and profile management.
	6.	Employer Dashboard
	•	Job posting and management tools.
	•	Access to candidate applications and resume search.
	•	Insights on job post performance (views, applications, etc.).
	7.	Advanced Search Page
	•	Detailed job search options, including keywords, location, salary range, and industry-specific skills.
	8.	About Us Page
	•	Information about your platform’s mission, vision, and focus on the promotional products industry.
	9.	Help Center/FAQs
	•	Guidance on using the platform for both job seekers and employers.
	10.	Contact Page
	•	Allow users to reach out for support, partnership inquiries, or advertising opportunities.
	11.	Blog/Resources
	•	Industry-specific articles, career advice, and hiring trends in promotional products.
	12.	Login/Signup Pages
	•	Secure registration and login for both job seekers and employers.
	13.	Admin Panel
	•	For managing site content, user accounts, reported issues, and platform analytics.

Database Fields

Users Table
	•	id
	•	username
	•	email
	•	password
	•	role (Job Seeker, Employer, Admin)
	•	profile_completed (Boolean)
	•	created_at
	•	updated_at

Job Seekers Table
	•	user_id (FK to Users)
	•	first_name
	•	last_name
	•	phone
	•	address
	•	resume (File Upload)
	•	skills (JSON or Text)
	•	desired_job_types (JSON or Enum)
	•	desired_salary_range
	•	saved_jobs (FK or JSON Array)
	•	applied_jobs (FK or JSON Array)

Employers Table
	•	user_id (FK to Users)
	•	company_name
	•	company_logo (File Upload)
	•	company_website
	•	industry
	•	location
	•	bio
	•	jobs_posted (FK or JSON Array)

Jobs Table
	•	id
	•	employer_id (FK to Employers)
	•	title
	•	description (Rich Text)
	•	location
	•	salary_range (Min & Max)
	•	job_type (Enum: Full-time, Part-time, Freelance, etc.)
	•	experience_level (Entry, Mid, Senior)
	•	skills_required (JSON or Text)
	•	posted_date
	•	expiry_date
	•	applications (FK to Applications Table)

Applications Table
	•	id
	•	job_id (FK to Jobs)
	•	job_seeker_id (FK to Job Seekers)
	•	resume (Optional, FK to Job Seekers)
	•	status (Pending, Reviewed, Shortlisted, Rejected)
	•	applied_date

Reviews Table (Optional)
	•	id
	•	employer_id (FK to Employers)
	•	reviewer_id (FK to Job Seekers)
	•	rating (Numeric)
	•	review_text
	•	created_at

Search and Analytics Table
	•	id
	•	user_id (FK to Users)
	•	search_keywords
	•	filters_used (JSON)
	•	timestamp

Key Functionalities
	1.	Job Posting
	•	Employers can post and edit jobs with rich text editors and upload media (e.g., company videos).
	2.	Resume Builder
	•	Allow job seekers to build resumes directly on the platform.
	3.	Search and Filters
	•	Advanced search with keyword relevance and filters specific to promotional products (e.g., “Design,” “Sales,” “Tech Products”).
	4.	Notifications
	•	Email or in-app notifications for new job matches, application updates, and job expirations.
	5.	User Authentication
	•	Secure login with two-factor authentication (optional).
	6.	Admin Tools
	•	Manage users, monitor platform activity, and handle disputes or reported issues.
	7.	Mobile-Friendly Design
	•	Ensure the site is responsive for users on mobile devices.
	8.	Payment Integration
	•	Allow employers to pay for premium listings or featured employer placement.
	9.	Analytics for Employers
	•	Provide insights into job post performance (views, applications, etc.).
	10.	Saved Jobs and Alerts
	•	Job seekers can save jobs and set up alerts for specific criteria.
	11.	Company Branding
	•	Employers can customize their company pages with branding options.
	12.	Industry-Specific Features
	•	Categories and terminology tailored for the promotional products industry.
	13.	Review and Rating System (Optional)
	•	Allow job seekers to review employers for transparency.

Technologies
	•	Frontend: Django templates, HTML5, CSS3, JavaScript (React or Vue.js for interactivity).
	•	Backend: Django for REST APIs and backend logic.
	•	Database: PostgreSQL or MySQL.
	•	Hosting: AWS, Google Cloud, or Azure.
	•	File Storage: Amazon S3 for resumes and employer media.

This structure provides a comprehensive foundation for a job website specific to the promotional products industry while leveraging proven features from successful job platforms. Let me know if you’d like to dive deeper into any section!

================
File: README.md
================
# v1promojobs

## Description

v1promojobs is a job board platform that connects employers with job seekers. It provides features for employers to post job listings and manage applications, and for job seekers to search for jobs and apply online.

## Features

*   User registration and authentication with dual user types (Employer/Job Seeker)
*   Profile management for both employers and job seekers
*   Job posting and management
*   Advanced search functionality with industry-specific filters
*   Job application management
*   Two-factor authentication

## Setup

1.  Clone the repository: `git clone [repository URL]`
2.  Create a virtual environment: `python -m venv .venv`
3.  Activate the virtual environment: `source .venv/bin/activate`
4.  Install dependencies: `pip install -r requirements.txt`
5.  Configure the database in `mysite/settings.py`
6.  Set up environment variables (especially `SECRET_KEY`) in `.env` file.
7.  Run migrations: `python manage.py migrate`
8.  Create a superuser: `python manage.py createsuperuser`
9.  Start the development server: `python manage.py runserver`

## Documentation

See the `docs` directory for architecture decision records (ADRs).

## License

[License information]

================
File: requirements.txt
================
asgiref==3.8.1
attrs==25.1.0
Automat==24.8.1
certifi==2025.1.31
cffi==1.17.1
charset-normalizer==3.4.1
constantly==23.10.4
cryptography==44.0.1
cssselect==1.2.0
defusedxml==0.7.1
Django==4.2
django-formtools==2.5.1
django-otp==1.5.4
django-phonenumber-field==8.0.0
django-ratelimit==4.1.0
django-redis==5.4.0
django-two-factor-auth==1.17.0
djangorestframework==3.15.2
filelock==3.17.0
hyperlink==21.0.0
idna==3.10
incremental==24.7.2
itemadapter==0.11.0
itemloaders==1.3.2
jmespath==1.0.1
load-dotenv==0.1.0
lxml==5.3.1
packaging==24.2
parsel==1.10.0
phonenumbers==8.13.54
pillow==11.1.0
Protego==0.4.0
pyasn1==0.6.1
pyasn1_modules==0.4.1
pycparser==2.22
PyDispatcher==2.0.7
pyOpenSSL==25.0.0
pypng==0.20220715.0
python-dotenv==1.0.1
qrcode==7.4.2
queuelib==1.7.0
redis==5.2.1
requests==2.32.3
requests-file==2.1.0
Scrapy==2.12.0
service-identity==24.2.0
setuptools==75.8.0
sqlparse==0.5.3
tldextract==5.1.3
Twisted==24.11.0
typing_extensions==4.12.2
urllib3==2.3.0
w3lib==2.3.1
zope.interface==7.2

================
File: reset_migrations.py
================
import sqlite3

# Connect to your database
conn = sqlite3.connect("instance/db.sqlite3")
cursor = conn.cursor()

# Delete migration records for problematic apps
cursor.execute("DELETE FROM django_migrations WHERE app IN (\"accounts\", \"employers\", \"jobs\", \"applications\")")

# Commit changes and close connection
conn.commit()
conn.close()
print("Migration records deleted successfully!")

================
File: systemPatterns.md
================
# System Patterns

## Architecture Overview
The application follows a modern web application architecture with clear separation of concerns:

### Layer Architecture
1. Presentation Layer (Frontend)
   - Django templates with HTML5/CSS3
   - JavaScript with React/Vue.js integration
   - Responsive design implementation

2. Application Layer (Backend)
   - Django REST framework
   - Business logic implementation
   - Service layer abstraction

3. Data Layer
   - SQLite database
   - Repository pattern implementation
   - Data access abstraction

## Design Patterns

### Repository Pattern
- Implemented for all database operations
- Centralized data access logic
- Consistent error handling
- Transaction management

### Service Layer Pattern
- Business logic encapsulation
- Cross-cutting concerns handling
- Service-to-service communication

### Factory Pattern
- User type creation (Employer/Job Seeker)
- Form generation
- Search query building

## Database Schema

### Core Entities
- Users (Base entity)
- JobSeekers (Profile extension)
- Employers (Company profile)
- Jobs (Listings)
- Applications (Job applications)
- Reviews (Optional company reviews)

### Relationships
- One-to-One: User to Profile
- One-to-Many: Employer to Jobs
- Many-to-Many: Jobs to JobSeekers (through Applications)

## Security Implementation

### Authentication
- Session-based authentication
- Token-based API authentication
- Two-factor authentication support

### Authorization
- Role-based access control
- Permission-based actions
- Resource ownership validation

## Error Handling

### Logging Strategy
- Application-level logging
- Error tracking and monitoring
- Performance metrics collection

### Error Response Pattern
- Consistent error format
- HTTP status code mapping
- Error categorization

## Caching Strategy
- View-level caching
- Query result caching
- Static asset caching

## File Storage
- Media files (resumes, company logos)
- Temporary file handling
- Cloud storage integration ready

## Testing Architecture
- Unit testing framework
- Integration test suite
- End-to-end testing capability
- Test data factories

## Deployment Pattern
- Environment-based configuration
- Docker container support
- CI/CD pipeline ready

================
File: tasklist.md
================
## Task List

**1. Project Setup and Configuration:**
    *   [ ] Activate the virtual environment: `. .venv/bin/activate`
    *   [ ] Install project dependencies from `requirements.txt` (create if it doesn't exist): `pip install -r requirements.txt`
    *   [ ] Configure the database (SQLite initially, as per `techContext.md`).
    *   [ ] Set up environment variables (especially `SECRET_KEY`) in `.env` file.
    *   [ ] Create the project structure as defined in `techContext.md`.

**2. User Management (accounts app):**
    *   [ ] Create `accounts` app: `python manage.py startapp accounts`
    *   [ ] Implement User model with dual user types (Employer/Job Seeker) as per `systemPatterns.md`.
    *   [ ] Implement profile management features.
    *   [ ] Implement session-based authentication.
    *   [ ] Implement role-based access control.
    *   [ ] Implement registration, login, logout views.
    *   [ ] Implement password reset functionality.
    *   [ ] Implement two-factor authentication support.
    *   [ ] Write unit tests for user management logic.

**3. Job Management (jobs app):**
    *   [ ] Create `jobs` app: `python manage.py startapp jobs`
    *   [ ] Implement Job model with fields for job details, rich text editing, and media upload support.
    *   [ ] Implement views for creating, editing, and managing job listings.
    *   [ ] Implement search and discovery features with industry-specific filters.
    *   [ ] Implement saved searches and alerts.
    *   [ ] Write unit tests for job management logic.

**4. Employer Profiles (employers app):**
    *   [ ] Create `employers` app: `python manage.py startapp employers`
    *   [ ] Implement Employer model with company profile details.
    *   [ ] Implement views for creating and managing employer profiles.

**5. Job Applications (applications app):**
    *   [ ] Create `applications` app: `python manage.py startapp applications`
    *   [ ] Implement Application model to manage job applications.
    *   [ ] Implement views for job seekers to apply for jobs.
    *   [ ] Implement views for employers to review applications.

**6. Search Functionality (search app):**
    *   [ ] Create `search` app: `python manage.py startapp search`
    *   [ ] Implement advanced search functionality with industry-specific filters.
    *   [ ] Implement saved searches and alerts.
    *   [ ] create tests and test functionality

**7. Core Functionality (core app):**
    *   [ ] Create `core` app: `python manage.py startapp core`
    *   [ ] Implement core functionalities and utilities.
    *   [ ] Implement error handling and logging.

**8. Frontend Development:**
    *   [ ] Develop HTML templates using Django Templates, HTML5, and CSS3.
    *   [ ] Integrate React/Vue.js for interactive components.
    *   [ ] Implement responsive design.

**9. API Development:**
    *   [ ] Implement RESTful API using Django REST Framework.
    *   [ ] Implement token-based authentication for API endpoints.
    *   [ ] Implement rate limiting.
    *   [ ] Generate API clients using OpenAPI Generator with TypeScript axios template and place generated code in `/src/generated`.

**10. Security Implementation:**
    *   [ ] Implement HTTPS.
    *   [ ] Prevent SQL injection.
    *   [ ] Implement XSS protection.
    *   [ ] Implement CSRF protection.
    *   [ ] Implement rate limiting.

**11. Analytics and Reporting:**
    *   [x] Implement job posting performance metrics.
    *   [x] Implement application tracking.
    *   [x] Implement user engagement analytics.

**12. Testing:**
    *   [ ] Write unit tests for business logic.
    *   [ ] Write integration tests for API endpoints.
    *   [ ] Write E2E tests for critical user flows.

**13. Documentation:**
    *   [ ] Update relevant documentation in `/docs` when modifying features.
    *   [ ] Keep `README.md` in sync with new capabilities.
    *   [ ] Maintain changelog entries in `CHANGELOG.md`.
    *   [ ] Create ADRs in `/docs/adr` for major dependency changes, architectural pattern changes, new integration patterns, and database schema changes.

**14. Deployment:**
    *   [ ] Configure environment-based settings.
    *   [ ] Implement Docker container support.
    *   [ ] Set up CI/CD pipeline.

================
File: techContext.md
================
# Technical Context

## Technology Stack

### Backend Framework
- Python 3.12
- Django 4.2
- Django REST Framework
- SQLite Database
- Redis Cache

### Frontend Technologies
- Django Templates
- HTML5
- CSS3
- JavaScript
- React/Vue.js (for interactive components)

### Development Environment
- Virtual Environment: .venv
- IDE Support: VS Code recommended
- Git for version control
- Docker for containerization

## Development Setup

### Prerequisites
```bash
# Python 3.12
# pip
# virtualenv
# git
# redis-server
```

### Environment Setup
```bash
# Create virtual environment
python -m venv .venv

# Activate virtual environment
# Windows
.venv\Scripts\activate
# Unix/MacOS
source .venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

## Project Structure
```
project_root/
├── .venv/
├── .env                    # Environment variables (git-ignored)
├── cline_docs/            # Memory bank documentation
├── docs/                  # Project documentation
│   ├── adr/              # Architecture Decision Records
│   └── api/              # API documentation
├── src/
│   ├── accounts/         # User management
│   ├── jobs/            # Job listings
│   ├── employers/       # Employer profiles
│   ├── applications/    # Job applications
│   ├── search/          # Search functionality
│   └── core/            # Core functionality
├── static/              # Static files
│   ├── css/
│   ├── js/
│   └── images/
└── templates/           # HTML templates
```

## Technical Constraints

### Performance Requirements
- Page load time < 3 seconds
- Search response time < 1 second
- File upload size limits: 10MB max

### Browser Support
- Modern browsers (last 2 versions)
- Mobile-responsive design required

### Security Requirements
- HTTPS required (using Let's Encrypt)
- SQL injection prevention
- XSS protection
- CSRF protection
- Rate limiting implementation

## Rate Limiting

Rate limiting is used to protect the API and website from abuse by limiting the number of requests that a user can make within a certain time period.

### Implementation Details

This project uses the `django-ratelimit` package for rate limiting.

1.  **Middleware:**

    The `RatelimitMiddleware` is used for global rate limiting. It applies rate limits to all views in the project.

    To enable the middleware, add it to the `MIDDLEWARE` setting in `mysite/settings.py`:

    ```python
    MIDDLEWARE = [
        ...,
        'django_ratelimit.middleware.RatelimitMiddleware',
    ]
    ```

2.  **`ratelimit` Decorator:**

    The `ratelimit` decorator is used for view-specific rate limiting. It allows you to apply rate limits to individual views.

    ```python
    from django_ratelimit.decorators import ratelimit

    @ratelimit(key='ip', rate='5/m', method='GET')
    def my_view(request):
        was_limited = getattr(request, 'limited', False)
        if was_limited:
            return HttpResponse('Rate limited!')
        else:
            return HttpResponse('Hello!')
    ```

    *   `key`: Specifies the key to use for rate limiting (e.g., 'ip' for IP address, 'user' for user ID).
    *   `rate`: Specifies the rate limit (e.g., '5/m' for 5 requests per minute).
    *   `method`: Specifies the HTTP methods to apply the rate limit to (e.g., 'GET', 'POST').

3.  **Configuration Options:**

    The following configuration options are available in `mysite/settings.py`:

    *   `RATELIMIT_USE_XFORWARDEDFOR`: Set to `True` if your server is behind a proxy.
    *   `RATELIMIT_DEFAULT_RATE`: Specifies the default rate limit for all views.

### Important Considerations

*   Choose appropriate rate limits to balance security and usability.
*   Monitor rate limiting activity to identify potential attacks.
*   Consider using different rate limits for different types of users or API endpoints.
# Technical Context

## Technology Stack

### Backend Framework
- Python 3.12
- Django 4.2
- Django REST Framework
- SQLite Database
- Redis Cache

### Frontend Technologies
- Django Templates
- HTML5
- CSS3
- JavaScript
- React/Vue.js (for interactive components)

### Development Environment
- Virtual Environment: .venv
- IDE Support: VS Code recommended
- Git for version control
- Docker for containerization

## Development Setup

### Prerequisites
```bash
# Python 3.12
# pip
# virtualenv
# git
# redis-server
```

### Environment Setup
```bash
# Create virtual environment
python -m venv .venv

# Activate virtual environment
# Windows
.venv\Scripts\activate
# Unix/MacOS
source .venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

## Project Structure
```
project_root/
├── .venv/
├── .env                    # Environment variables (git-ignored)
├── cline_docs/            # Memory bank documentation
├── docs/                  # Project documentation
│   ├── adr/              # Architecture Decision Records
│   └── api/              # API documentation
├── src/
│   ├── accounts/         # User management
│   ├── jobs/            # Job listings
│   ├── employers/       # Employer profiles
│   ├── applications/    # Job applications
│   ├── search/          # Search functionality
│   └── core/            # Core functionality
├── static/              # Static files
│   ├── css/
│   ├── js/
│   └── images/
└── templates/           # HTML templates
```

## Technical Constraints

### Performance Requirements
- Page load time < 3 seconds
- Search response time < 1 second
- File upload size limits: 10MB max

### Browser Support
- Modern browsers (last 2 versions)
- Mobile-responsive design required

### Security Requirements
- HTTPS required (using Let's Encrypt)
- SQL injection prevention
- XSS protection
- CSRF protection
- Rate limiting implementation

## XSS (Cross-Site Scripting) Protection

Cross-Site Scripting (XSS) attacks occur when malicious scripts are injected into trusted websites. Django provides several built-in mechanisms to prevent XSS attacks.

### Best Practices in Django

1.  **Automatic HTML Escaping in Templates:**

    Django's template engine automatically escapes HTML, which means that it converts potentially dangerous characters into their HTML entity equivalents. This prevents browsers from interpreting them as code.

    ```html
    {# Example of automatic HTML escaping #}
    {{ user.name }}
    ```

2.  **Validate and Sanitize User Input:**

    Always validate and sanitize user input to prevent malicious data from being injected into your templates. Use Django's built-in form validation and sanitization tools.

    ```python
    from django import forms
    from django.utils.html import escape

    class CommentForm(forms.Form):
        text = forms.CharField(max_length=200)

        def clean_text(self):
            text = self.cleaned_data['text']
            return escape(text)

    def comment_view(request):
        if request.method == 'POST':
            form = CommentForm(request.POST)
            if form.is_valid():
                text = form.cleaned_data['text']
                # Save the comment
            else:
                # Handle invalid form data
        else:
            form = CommentForm()
        return render(request, 'comment.html', {'form': form})
    ```

3.  **Use the `safe` Filter Sparingly:**

    The `safe` filter tells Django that a variable contains safe HTML that doesn't need to be escaped. Use this filter sparingly and only when you are absolutely sure that the content is safe.

    ```html
    {# Example of using the safe filter #}
    {{ trusted_html|safe }}
    ```

4.  **Set the `X-Content-Type-Options` Header:**

    Setting the `X-Content-Type-Options` header to `nosniff` prevents browsers from trying to MIME-sniff the content type of a response. This can help prevent XSS attacks that exploit MIME-sniffing vulnerabilities.

    You can set this header in your Django settings:

    ```python
    SECURE_HSTS_SECONDS = 31536000
    SECURE_CONTENT_TYPE_NOSNIFF = True
    ```

5.  **Use a Content Security Policy (CSP):**

    A Content Security Policy (CSP) is an HTTP header that allows you to control the resources that the browser is allowed to load for a given page. This can help prevent XSS attacks by restricting the sources from which scripts can be loaded.

    You can configure CSP in your Django settings using a package like `django-csp`:

    ```python
    # Install django-csp
    pip install django-csp

    # Add it to INSTALLED_APPS
    INSTALLED_APPS = [
        ...,
        'csp',
    ]

    # Configure CSP settings
    CSP_DEFAULT_SRC = ("'self'",)
    CSP_SCRIPT_SRC = ("'self'", "https://unpkg.com")
    CSP_STYLE_SRC = ("'self'", "https://cdn.jsdelivr.net")
    CSP_IMG_SRC = ("'self'",)
    ```

By following these best practices, you can significantly reduce the risk of XSS attacks in your Django project.
# Technical Context

## Technology Stack

### Backend Framework
- Python 3.12
- Django 4.2
- Django REST Framework
- SQLite Database
- Redis Cache

### Frontend Technologies
- Django Templates
- HTML5
- CSS3
- JavaScript
- React/Vue.js (for interactive components)

### Development Environment
- Virtual Environment: .venv
- IDE Support: VS Code recommended
- Git for version control
- Docker for containerization

## Development Setup

### Prerequisites
```bash
# Python 3.12
# pip
# virtualenv
# git
# redis-server
```

### Environment Setup
```bash
# Create virtual environment
python -m venv .venv

# Activate virtual environment
# Windows
.venv\Scripts\activate
# Unix/MacOS
source .venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

## Project Structure
```
project_root/
├── .venv/
├── .env                    # Environment variables (git-ignored)
├── cline_docs/            # Memory bank documentation
├── docs/                  # Project documentation
│   ├── adr/              # Architecture Decision Records
│   └── api/              # API documentation
├── src/
│   ├── accounts/         # User management
│   ├── jobs/            # Job listings
│   ├── employers/       # Employer profiles
│   ├── applications/    # Job applications
│   ├── search/          # Search functionality
│   └── core/            # Core functionality
├── static/              # Static files
│   ├── css/
│   ├── js/
│   └── images/
└── templates/           # HTML templates
```

## Technical Constraints

### Performance Requirements
- Page load time < 3 seconds
- Search response time < 1 second
- File upload size limits: 10MB max

### Browser Support
- Modern browsers (last 2 versions)
- Mobile-responsive design required

### Security Requirements
- HTTPS required (using Let's Encrypt)
- SQL injection prevention
- XSS protection
- CSRF protection
- Rate limiting implementation

## SQL Injection Prevention

SQL injection is a code injection technique that might allow an attacker to execute malicious SQL statements that could control a database server.

### Best Practices in Django

1.  **Use Django's ORM:**

    Django's ORM (Object-Relational Mapper) provides a high-level interface for interacting with databases. It automatically escapes queries, which significantly reduces the risk of SQL injection.

    ```python
    # Example using Django's ORM
    from .models import Job

    jobs = Job.objects.filter(title__contains='Python')
    ```

2.  **Avoid Raw SQL Queries:**

    Whenever possible, avoid using raw SQL queries. Raw SQL queries bypass the ORM's built-in protection mechanisms.

3.  **Use Parameterized Queries with Proper Escaping:**

    If you must use raw SQL queries, use parameterized queries with proper escaping. This ensures that user-provided data is treated as data, not as code.

    ```python
    from django.db import connection

    def get_jobs_by_title(title):
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM jobs_job WHERE title LIKE %s", [title])
            rows = cursor.fetchall()
        return rows
    ```

4.  **Validate and Sanitize User Input:**

    Always validate and sanitize user input to prevent malicious data from being injected into your queries. Use Django's built-in form validation and sanitization tools.

    ```python
    from django import forms

    class SearchForm(forms.Form):
        title = forms.CharField(max_length=100)

    def search_view(request):
        if request.method == 'POST':
            form = SearchForm(request.POST)
            if form.is_valid():
                title = form.cleaned_data['title']
                # Use the title in a query
            else:
                # Handle invalid form data
        else:
            form = SearchForm()
        return render(request, 'search.html', {'form': form})
    ```

By following these best practices, you can significantly reduce the risk of SQL injection in your Django project.
# Technical Context

## Technology Stack

### Backend Framework
- Python 3.12
- Django 4.2
- Django REST Framework
- SQLite Database
- Redis Cache

### Frontend Technologies
- Django Templates
- HTML5
- CSS3
- JavaScript
- React/Vue.js (for interactive components)

### Development Environment
- Virtual Environment: .venv
- IDE Support: VS Code recommended
- Git for version control
- Docker for containerization

## Development Setup

### Prerequisites
```bash
# Python 3.12
# pip
# virtualenv
# git
# redis-server
```

### Environment Setup
```bash
# Create virtual environment
python -m venv .venv

# Activate virtual environment
# Windows
.venv\Scripts\activate
# Unix/MacOS
source .venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

## Project Structure
```
project_root/
├── .venv/
├── .env                    # Environment variables (git-ignored)
├── cline_docs/            # Memory bank documentation
├── docs/                  # Project documentation
│   ├── adr/              # Architecture Decision Records
│   └── api/              # API documentation
├── src/
│   ├── accounts/         # User management
│   ├── jobs/            # Job listings
│   ├── employers/       # Employer profiles
│   ├── applications/    # Job applications
│   ├── search/          # Search functionality
│   └── core/            # Core functionality
├── static/              # Static files
│   ├── css/
│   ├── js/
│   └── images/
└── templates/           # HTML templates
```

## Technical Constraints

### Performance Requirements
- Page load time < 3 seconds
- Search response time < 1 second
- File upload size limits: 10MB max

### Browser Support
- Modern browsers (last 2 versions)
- Mobile-responsive design required

### Security Requirements
- HTTPS required (using Let's Encrypt)
- SQL injection prevention
- XSS protection
- CSRF protection
- Rate limiting implementation

## HTTPS Implementation

To implement HTTPS, you will need to:

1.  Obtain an SSL/TLS certificate from a certificate authority like Let's Encrypt.
2.  Configure your web server (e.g., Nginx or Apache) to use the certificate.

Here's a general outline of the steps involved:

### Using Let's Encrypt with Certbot

Let's Encrypt is a free, automated, and open certificate authority. You can use Certbot, a tool that automates the process of obtaining and installing Let's Encrypt certificates.

1.  **Install Certbot:**

    ```bash
    # For Debian/Ubuntu:
    sudo apt update
    sudo apt install certbot

    # For CentOS/RHEL:
    sudo yum install epel-release
    sudo yum install certbot

    # For macOS:
    brew install certbot
    ```

2.  **Obtain a Certificate:**

    *   **For Nginx:**

        ```bash
        sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com
        ```

    *   **For Apache:**

        ```bash
        sudo certbot --apache -d yourdomain.com -d www.yourdomain.com
        ```

    Replace `yourdomain.com` with your actual domain name.

3.  **Certbot will guide you through the process of configuring your web server to use the certificate.**

4.  **Automatic Renewal:**

    Certbot also sets up automatic renewal of your certificates. You can test the renewal process with:

    ```bash
    sudo certbot renew --dry-run
    ```

### Manual Configuration

If you prefer to configure HTTPS manually, you'll need to:

1.  Obtain an SSL/TLS certificate from a certificate authority.
2.  Configure your web server to point to the certificate and private key files.
3.  Ensure that your web server is listening on port 443 (the standard port for HTTPS).

### Important Considerations

*   Always use strong SSL/TLS configurations.
*   Keep your certificates up to date.
*   Regularly test your HTTPS configuration using tools like SSL Labs' SSL Server Test.
# Technical Context

## Technology Stack

### Backend Framework
- Python 3.12
- Django 4.2
- Django REST Framework
- SQLite Database
- Redis Cache

### Frontend Technologies
- Django Templates
- HTML5
- CSS3
- JavaScript
- React/Vue.js (for interactive components)

### Development Environment
- Virtual Environment: .venv
- IDE Support: VS Code recommended
- Git for version control
- Docker for containerization

## Development Setup

### Prerequisites
```bash
# Python 3.12
# pip
# virtualenv
# git
# redis-server
```

### Environment Setup
```bash
# Create virtual environment
python -m venv .venv

# Activate virtual environment
# Windows
.venv\Scripts\activate
# Unix/MacOS
source .venv/bin/activate

# Install dependencies
pip install -r requirements.txt
```

## Project Structure
```
project_root/
├── .venv/
├── .env                    # Environment variables (git-ignored)
├── cline_docs/            # Memory bank documentation
├── docs/                  # Project documentation
│   ├── adr/              # Architecture Decision Records
│   └── api/              # API documentation
├── src/
│   ├── accounts/         # User management
│   ├── jobs/            # Job listings
│   ├── employers/       # Employer profiles
│   ├── applications/    # Job applications
│   ├── search/          # Search functionality
│   └── core/            # Core functionality
├── static/              # Static files
│   ├── css/
│   ├── js/
│   └── images/
└── templates/           # HTML templates
```

## Technical Constraints

### Performance Requirements
- Page load time < 3 seconds
- Search response time < 1 second
- File upload size limits: 10MB max

### Browser Support
- Modern browsers (last 2 versions)
- Mobile-responsive design required

### Security Requirements
- HTTPS required
- SQL injection prevention
- XSS protection
- CSRF protection
- Rate limiting implementation

## Integration Points

### External Services
- Email service integration
- File storage service
- Payment processing (future)
- Analytics integration

### API Architecture
- RESTful API design
- JSON response format
- Token-based authentication
- Rate limiting implementation

## Monitoring and Logging

### Application Monitoring
- Error tracking
- Performance monitoring
- User activity logging

### Security Monitoring
- Authentication attempts
- Authorization failures
- Resource access logging

## Deployment Considerations

### Environment Configuration
- Development
- Staging
- Production

### Database Management
- Migration strategy
- Backup procedures
- Data retention policies

## Documentation Requirements

### Code Documentation
- Docstrings required
- README files
- API documentation
- Architectural documentation

### Testing Documentation
- Test cases
- Testing procedures
- Coverage reports

================
File: two_factor_urls.py
================
from django.apps.registry import apps
from django.urls import include, path

from two_factor.views import (
    BackupTokensView, DisableView, LoginView, ProfileView, QRGeneratorView,
    SetupCompleteView, SetupView,
)

app_name = 'two_factor'

core = [
    path(
        'account/login/',
        LoginView.as_view(),
        name='login',
    ),
    path(
        'account/two_factor/setup/',
        SetupView.as_view(),
        name='setup',
    ),
    path(
        'account/two_factor/qrcode/',
        QRGeneratorView.as_view(),
        name='qr',
    ),
    path(
        'account/two_factor/setup/complete/',
        SetupCompleteView.as_view(),
        name='setup_complete',
    ),
    path(
        'account/two_factor/backup/tokens/',
        BackupTokensView.as_view(),
        name='backup_tokens',
    ),
]

profile = [
    path(
        'account/two_factor/',
        ProfileView.as_view(),
        name='profile',
    ),
    path(
        'account/two_factor/disable/',
        DisableView.as_view(),
        name='disable',
    ),
]

plugin_urlpatterns = []
for app_config in apps.get_app_configs():
    if app_config.name.startswith('two_factor.plugins.'):
        # Phonenumber used to be include in the two_factor core. Because we
        # don't want to change the url names and break backwards compatibility
        # we keep the urls of the phonenumber plugin in the core two_factor
        # namespace.
        if app_config.name == 'two_factor.plugins.phonenumber':
            namespace = None
        else:
            namespace = app_config.label
        try:
            plugin_urlpatterns.append(
                path(
                    f'account/two_factor/{app_config.url_prefix}/',
                    include(f'{app_config.name}.urls', namespace)
                ),
            )
        except AttributeError:
            pass

urlpatterns = core + profile + plugin_urlpatterns



================================================================
End of Codebase
================================================================
