/* tslint:disable */
/* eslint-disable */
/**
 * V1PromoJobs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountsApiTokenAuthPost200Response
 */
export interface AccountsApiTokenAuthPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTokenAuthPost200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface AccountsApiTokenAuthPostRequest
 */
export interface AccountsApiTokenAuthPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTokenAuthPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AccountsApiTokenAuthPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'employer': number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'location': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'salary': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'industry': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'created_at': string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'views': number;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'applications': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Obtain authentication token
         * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenAuthPost: async (accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountsApiTokenAuthPostRequest' is not null or undefined
            assertParamExists('accountsApiTokenAuthPost', 'accountsApiTokenAuthPostRequest', accountsApiTokenAuthPostRequest)
            const localVarPath = `/accounts/api-token-auth/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountsApiTokenAuthPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific job
         * @param {number} pk Primary key of the job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPkGet: async (pk: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pk' is not null or undefined
            assertParamExists('apiJobsPkGet', 'pk', pk)
            const localVarPath = `/api/jobs/{pk}/`
                .replace(`{${"pk"}}`, encodeURIComponent(String(pk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication TokenAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Obtain authentication token
         * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsApiTokenAuthPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.accountsApiTokenAuthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiJobsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific job
         * @param {number} pk Primary key of the job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsPkGet(pk: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsPkGet(pk, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiJobsPkGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Obtain authentication token
         * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccountsApiTokenAuthPost200Response> {
            return localVarFp.accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Job>> {
            return localVarFp.apiJobsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific job
         * @param {number} pk Primary key of the job to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPkGet(pk: number, options?: RawAxiosRequestConfig): AxiosPromise<Job> {
            return localVarFp.apiJobsPkGet(pk, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Obtain authentication token
     * @param {AccountsApiTokenAuthPostRequest} accountsApiTokenAuthPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest: AccountsApiTokenAuthPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).accountsApiTokenAuthPost(accountsApiTokenAuthPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific job
     * @param {number} pk Primary key of the job to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobsPkGet(pk: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobsPkGet(pk, options).then((request) => request(this.axios, this.basePath));
    }
}



